{
    "openapi": "3.0.1",
    "info": {
        "title": "Bamboo",
        "description": "This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to: \n\n - integrate Bamboo with other applications;\n\n - create scripts that interact with Bamboo; or\n\n - develop plugins that enhance the Bamboo UI, using REST to interact with the backend. \n\n You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).",
        "termsOfService": "https://www.atlassian.com/legal/customer-agreement",
        "contact": {
            "name": "Bamboo Jira Project",
            "url": "https://jira.atlassian.com/projects/BAM/summary"
        },
        "version": "9.0.2.gnl"
    },
    "servers": [
        {
            "url": "https://{baseurl}/rest/",
            "variables": {
                "baseurl": {
                    "default": "example.com:8085",
                    "description": "Bamboo URL"
                }
            }
        }
    ],
    "components": {
        "securitySchemes": {
            "basic": {
                "type": "http",
                "description": "In order to use basic authorization, provide username:password Base64 encoded in the 'Authorization' header.",
                "scheme": "basic"
            }
        },
        "schemas": {
            "RestBrokenPlan": {
                "properties": {
                    "responsibleUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestUserResponsible"
                        }
                    },
                    "planResultKey": {
                        "type": "string",
                        "example": "PROJ-PLAN-2"
                    }
                }
            },
            "RestErrorCollection": {
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "fieldErrors": {
                        "type": "object"
                    }
                }
            },
            "RestPageModelRestBrokenPlan": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBrokenPlan"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestUserResponsible": {
                "properties": {
                    "assignedUser": {
                        "type": "string"
                    },
                    "assignedBy": {
                        "type": "string"
                    }
                }
            },
            "AgentStatus": {
                "properties": {
                    "displayName": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "orderIndex": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "imagePath": {
                        "type": "string"
                    },
                    "allowDelete": {
                        "type": "boolean"
                    },
                    "idle": {
                        "type": "boolean"
                    }
                }
            },
            "ArtifactLink": {
                "properties": {
                    "sharedArtifact": {
                        "type": "boolean"
                    },
                    "producerJobResult": {
                        "$ref": "#/components/schemas/BuildResultsSummary"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "artifact": {
                        "$ref": "#/components/schemas/MutableArtifact"
                    },
                    "label": {
                        "type": "string"
                    },
                    "buildResultsSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "linkType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Author": {
                "properties": {
                    "breakages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "fixes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "numberOfBreakages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfFixes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failedBuilds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "numberOfFailedBuilds": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successfulBuilds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "numberOfSuccessfulBuilds": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "triggeredBuildResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "allTriggeredBuildResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultsSummary"
                        }
                    },
                    "numberOfTriggeredBuilds": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "linkedUserName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "AuthorContext": {
                "properties": {
                    "linkedUserName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "BambooEntityOid": {
                "properties": {
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "serverKey": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entityOid": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BranchIntegrationConfiguration": {
                "properties": {
                    "strategy": {
                        "type": "string",
                        "enum": [
                            "BRANCH_UPDATER",
                            "GATE_KEEPER"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "pushEnabled": {
                        "type": "boolean"
                    },
                    "integrationPlanBranchKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "integrationPoint": {
                        "$ref": "#/components/schemas/BranchIntegrationPoint"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "BranchIntegrationPoint": {
                "properties": {
                    "integrationVcsReference": {
                        "type": "string"
                    },
                    "integrationPlanBranchKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    }
                }
            },
            "BranchMonitoringConfiguration": {
                "properties": {
                    "planBranchWorkflow": {
                        "type": "string",
                        "enum": [
                            "BRANCH_WORKFLOW",
                            "MANUAL_WORKFLOW",
                            "PULL_REQUEST_WORKFLOW",
                            "FORK_ENABLED_PULL_REQUEST_WORKFLOW"
                        ]
                    },
                    "matchingPattern": {
                        "type": "string"
                    },
                    "inactiveBranchCleanUpPeriodInDays": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "removedBranchCleanUpPeriodInDays": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultBranchNotificationStrategy": {
                        "type": "string",
                        "enum": [
                            "NOTIFY_COMMITTERS",
                            "INHERIT",
                            "NONE"
                        ]
                    },
                    "defaultBranchIntegrationConfiguration": {
                        "$ref": "#/components/schemas/BranchIntegrationConfiguration"
                    },
                    "remoteJiraBranchLinkingEnabled": {
                        "type": "boolean"
                    },
                    "branchTriggeringOption": {
                        "type": "string",
                        "enum": [
                            "INHERITED",
                            "MANUAL_ONLY",
                            "CUSTOM"
                        ]
                    },
                    "defaultTrigger": {
                        "$ref": "#/components/schemas/TriggerDefinition"
                    },
                    "planBranchCreationEnabled": {
                        "type": "boolean"
                    },
                    "removedBranchCleanUpEnabled": {
                        "type": "boolean"
                    },
                    "inactiveBranchCleanUpEnabled": {
                        "type": "boolean"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "BranchSpecificConfiguration": {
                "properties": {
                    "branchCleanupDisabled": {
                        "type": "boolean"
                    },
                    "ignoreSpecs": {
                        "type": "boolean"
                    },
                    "notificationStrategy": {
                        "type": "string",
                        "enum": [
                            "NOTIFY_COMMITTERS",
                            "INHERIT",
                            "NONE"
                        ]
                    },
                    "planBranchWorkflow": {
                        "type": "string",
                        "enum": [
                            "BRANCH_WORKFLOW",
                            "MANUAL_WORKFLOW",
                            "PULL_REQUEST_WORKFLOW",
                            "FORK_ENABLED_PULL_REQUEST_WORKFLOW"
                        ]
                    },
                    "awaitingSpecsExecution": {
                        "type": "boolean"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "BuildAgent": {
                "properties": {
                    "busy": {
                        "type": "boolean"
                    },
                    "agentStatus": {
                        "$ref": "#/components/schemas/AgentStatus"
                    },
                    "dedicated": {
                        "type": "boolean"
                    },
                    "requestedToBeStopped": {
                        "type": "boolean"
                    },
                    "definition": {
                        "$ref": "#/components/schemas/PipelineDefinition"
                    },
                    "unresponsive": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "REMOTE",
                            "ELASTIC"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    }
                }
            },
            "BuildDefinition": {
                "properties": {
                    "triggerDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDefinition"
                        }
                    },
                    "dockerPipelineConfiguration": {
                        "$ref": "#/components/schemas/DockerPipelineConfiguration"
                    },
                    "customConfiguration": {
                        "type": "object"
                    },
                    "branchSpecificConfiguration": {
                        "$ref": "#/components/schemas/BranchSpecificConfiguration"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    },
                    "branchMonitoringConfiguration": {
                        "$ref": "#/components/schemas/BranchMonitoringConfiguration"
                    },
                    "branchIntegrationConfiguration": {
                        "$ref": "#/components/schemas/BranchIntegrationConfiguration"
                    },
                    "configObjects": {
                        "type": "object"
                    },
                    "merged": {
                        "type": "boolean"
                    },
                    "cleanWorkingDirectory": {
                        "type": "boolean"
                    },
                    "repositoryIdDefiningWorkingDir": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BuildDefinitionForBuild": {
                "properties": {
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "merged": {
                        "type": "boolean"
                    },
                    "xmlData": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BuildLogger": {
                "properties": {
                    "logEntryCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "persistent": {
                        "type": "boolean"
                    },
                    "timeOfLastLog": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "interceptorStack": {
                        "$ref": "#/components/schemas/LogInterceptorStack"
                    },
                    "mutatorStack": {
                        "$ref": "#/components/schemas/LogMutatorStack"
                    }
                }
            },
            "BuildMonitoringLink": {
                "properties": {
                    "link": {
                        "type": "string",
                        "example": "http://{baseurl}/rest/admin/latest/config/build/monitoring"
                    }
                }
            },
            "BuildResultsSummary": {
                "properties": {
                    "vcsUpdateTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "queueDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "vcsUpdateDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "producedArtifactLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "filteredTestResults": {
                        "$ref": "#/components/schemas/FilteredTestResultsTestClassResult"
                    },
                    "extraBuildResultsData": {
                        "$ref": "#/components/schemas/ExtraBuildResultsData"
                    },
                    "resultVariables": {
                        "type": "object"
                    },
                    "chainResultsSummary": {
                        "$ref": "#/components/schemas/ChainResultsSummary"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "buildResultKey": {
                        "type": "string"
                    },
                    "immutablePlan": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "onceOff": {
                        "type": "boolean"
                    },
                    "restartCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "customBuild": {
                        "type": "boolean"
                    },
                    "rebuild": {
                        "type": "boolean"
                    },
                    "logSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "buildCompletedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildCancelledDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "timeToFix": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    },
                    "deltaState": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "PASSING",
                            "FAILING",
                            "BROKEN",
                            "FIXED"
                        ]
                    },
                    "testResultsSummary": {
                        "$ref": "#/components/schemas/TestResultsSummary"
                    },
                    "buildDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "queueTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildAgentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "variableContextBaselineId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "formatVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "variableContextLogsEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "substitutedVariablesEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "successful": {
                        "type": "boolean"
                    },
                    "failed": {
                        "type": "boolean"
                    },
                    "notRunYet": {
                        "type": "boolean"
                    },
                    "notBuilt": {
                        "type": "boolean"
                    },
                    "planName": {
                        "type": "string"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "inProgress": {
                        "type": "boolean"
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "planIfExists": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "durationDescription": {
                        "type": "string"
                    },
                    "relativeBuildDate": {
                        "type": "string"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "testSummary": {
                        "type": "string"
                    },
                    "jiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "immutableChain": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "commits": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/Commit"
                        }
                    },
                    "queued": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "waiting": {
                        "type": "boolean"
                    },
                    "customBuildData": {
                        "type": "object"
                    },
                    "fixingJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "relatedJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "jiraIssueKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uniqueAuthors": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Author"
                        }
                    },
                    "processingDurationDescription": {
                        "type": "string"
                    },
                    "shortReasonSummary": {
                        "type": "string"
                    },
                    "relativeQueueDate": {
                        "type": "string"
                    },
                    "relativeBuildStartedDate": {
                        "type": "string"
                    },
                    "buildTime": {
                        "type": "string"
                    },
                    "artifactLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "artifactLinksThatExist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "changesListSummary": {
                        "type": "string"
                    },
                    "substitutedVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "variableContextLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "manuallyOverriddenVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "fullPlanName": {
                        "type": "string"
                    },
                    "statDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ChainResultsSummary": {
                "properties": {
                    "specsResult": {
                        "type": "boolean"
                    },
                    "continuable": {
                        "type": "boolean"
                    },
                    "mergeResult": {
                        "$ref": "#/components/schemas/MergeResultSummary"
                    },
                    "fixedInResult": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "restartable": {
                        "type": "boolean"
                    },
                    "immutablePlan": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "planIfExists": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "stageResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChainStageResult"
                        }
                    },
                    "testResults": {
                        "$ref": "#/components/schemas/TestResultsDetails"
                    },
                    "failedJobResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResultsSummary"
                        }
                    },
                    "totalJobCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "successful": {
                        "type": "boolean"
                    },
                    "failed": {
                        "type": "boolean"
                    },
                    "notRunYet": {
                        "type": "boolean"
                    },
                    "notBuilt": {
                        "type": "boolean"
                    },
                    "planName": {
                        "type": "string"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "inProgress": {
                        "type": "boolean"
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "durationDescription": {
                        "type": "string"
                    },
                    "relativeBuildDate": {
                        "type": "string"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "queueTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "testSummary": {
                        "type": "string"
                    },
                    "testResultsSummary": {
                        "$ref": "#/components/schemas/TestResultsSummary"
                    },
                    "jiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "buildCompletedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "restartCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "onceOff": {
                        "type": "boolean"
                    },
                    "immutableChain": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "commits": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/Commit"
                        }
                    },
                    "queued": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "waiting": {
                        "type": "boolean"
                    },
                    "customBuildData": {
                        "type": "object"
                    },
                    "fixingJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "relatedJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "jiraIssueKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uniqueAuthors": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Author"
                        }
                    },
                    "timeToFix": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDurationDescription": {
                        "type": "string"
                    },
                    "shortReasonSummary": {
                        "type": "string"
                    },
                    "relativeQueueDate": {
                        "type": "string"
                    },
                    "relativeBuildStartedDate": {
                        "type": "string"
                    },
                    "buildTime": {
                        "type": "string"
                    },
                    "artifactLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "artifactLinksThatExist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "changesListSummary": {
                        "type": "string"
                    },
                    "substitutedVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "variableContextLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "manuallyOverriddenVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "buildAgentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullPlanName": {
                        "type": "string"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    },
                    "deltaState": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "PASSING",
                            "FAILING",
                            "BROKEN",
                            "FIXED"
                        ]
                    },
                    "customBuild": {
                        "type": "boolean"
                    },
                    "rebuild": {
                        "type": "boolean"
                    },
                    "logSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "buildCancelledDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "statDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "buildResultKey": {
                        "type": "string"
                    },
                    "variableContextBaselineId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "formatVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "variableContextLogsEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "substitutedVariablesEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    }
                }
            },
            "ChainStageResult": {
                "properties": {
                    "restartable": {
                        "type": "boolean"
                    },
                    "successful": {
                        "type": "boolean"
                    },
                    "failed": {
                        "type": "boolean"
                    },
                    "notBuilt": {
                        "type": "boolean"
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "manual": {
                        "type": "boolean"
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "chainResult": {
                        "$ref": "#/components/schemas/ChainResultsSummary"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "final": {
                        "type": "boolean"
                    },
                    "processingDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "runnable": {
                        "type": "boolean"
                    },
                    "manualVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StageVariableContext"
                        }
                    },
                    "manualVariablesEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StageVariableContext"
                        }
                    },
                    "sortedBuildResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResultsSummary"
                        }
                    },
                    "failedBuildResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResultsSummary"
                        }
                    },
                    "successfulBuildResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResultsSummary"
                        }
                    },
                    "completed": {
                        "type": "boolean"
                    },
                    "allJobsExist": {
                        "type": "boolean"
                    },
                    "allNotSuccessfulJobsExist": {
                        "type": "boolean"
                    },
                    "buildResults": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResultsSummary"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ChainStorageTag": {
            },
            "Commit": {
                "properties": {
                    "author": {
                        "$ref": "#/components/schemas/Author"
                    },
                    "repositoryChangeset": {
                        "$ref": "#/components/schemas/RepositoryChangeset"
                    },
                    "foreignCommit": {
                        "type": "boolean"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommitFile"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "authorContext": {
                        "$ref": "#/components/schemas/AuthorContext"
                    },
                    "changeSetId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "CommitFile": {
                "properties": {
                    "cleanName": {
                        "type": "string"
                    },
                    "changesetId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "revisionKnown": {
                        "type": "boolean"
                    }
                }
            },
            "ConfigurationInterpolator": {
                "properties": {
                    "defaultLookup": {
                        "$ref": "#/components/schemas/StrLookup"
                    }
                }
            },
            "ConfigurationNode": {
                "properties": {
                    "parentNode": {
                        "$ref": "#/components/schemas/ConfigurationNode"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "defined": {
                        "type": "boolean"
                    },
                    "attribute": {
                        "type": "boolean"
                    },
                    "reference": {
                        "type": "object"
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "attributeCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "childrenCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ConsumedSubscription": {
                "properties": {
                    "artifactLink": {
                        "$ref": "#/components/schemas/ArtifactLink"
                    },
                    "destinationDirectory": {
                        "type": "string"
                    },
                    "consumerResultSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateAccessTokenRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "token name"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CreateCommentRequest": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "example": "first successful build"
                    }
                },
                "xml": {
                    "name": "comment"
                }
            },
            "DashboardProjectWithEnvironmentStatus": {
                "type": "object",
                "properties": {
                    "deploymentProject": {
                        "$ref": "#/components/schemas/DeploymentProject"
                    },
                    "environmentStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentStatus"
                        }
                    },
                    "futureVersion": {
                        "$ref": "#/components/schemas/RestDeploymentVersion"
                    },
                    "relatedVersion": {
                        "$ref": "#/components/schemas/RestDeploymentVersion"
                    }
                }
            },
            "DataVolume": {
                "properties": {
                    "containerDirectory": {
                        "type": "string"
                    },
                    "hostDirectory": {
                        "type": "string"
                    }
                }
            },
            "DeploymentKey": {
                "properties": {
                    "key": {
                        "type": "string"
                    }
                }
            },
            "DeploymentProject": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Environment"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "$ref": "#/components/schemas/DeploymentKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/Operations"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "repositorySpecsManaged": {
                        "type": "boolean"
                    },
                    "vcsBambooSpecsSource": {
                        "$ref": "#/components/schemas/ImmutableVcsBambooSpecsSource"
                    }
                }
            },
            "DeploymentResult": {
                "type": "object",
                "properties": {
                    "agent": {
                        "$ref": "#/components/schemas/BuildAgent"
                    },
                    "agentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "customData": {
                        "type": "object",
                        "properties": {
                        }
                    },
                    "deploymentState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "deploymentVersion": {
                        "$ref": "#/components/schemas/DeploymentVersion"
                    },
                    "deploymentVersionName": {
                        "type": "string"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/Environment"
                    },
                    "environmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "executedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "$ref": "#/components/schemas/DeploymentResultKey"
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "operations": {
                        "$ref": "#/components/schemas/Operations"
                    },
                    "queuedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "startedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    }
                }
            },
            "DeploymentResultKey": {
                "properties": {
                    "deploymentResultId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "entityKey": {
                        "$ref": "#/components/schemas/Key"
                    },
                    "resultNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "resultNumberLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "type": "string"
                    }
                }
            },
            "DeploymentVersion": {
                "properties": {
                    "operations": {
                        "$ref": "#/components/schemas/Operations"
                    },
                    "versionStatus": {
                        "$ref": "#/components/schemas/DeploymentVersionStatus"
                    },
                    "variableContext": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitutionContext"
                        }
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentVersionItem"
                        }
                    },
                    "creatorDisplayName": {
                        "type": "string"
                    },
                    "creatorGravatarUrl": {
                        "type": "string"
                    },
                    "deploymentProjectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "planBranchName": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "ageZeroPoint": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "creatorUserName": {
                        "type": "string"
                    }
                }
            },
            "DeploymentVersionItem": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "BAM_ARTIFACT",
                            "SOURCE"
                        ]
                    }
                }
            },
            "DeploymentVersionStatus": {
                "properties": {
                    "gravatarUrl": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "versionState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Approved",
                            "Broken",
                            "Incomplete"
                        ]
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userName": {
                        "type": "string"
                    }
                }
            },
            "DirectoryInformationResponse": {
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DirectoryInformationResult"
                        }
                    }
                }
            },
            "DirectoryInformationResult": {
                "properties": {
                    "planName": {
                        "type": "string"
                    },
                    "artifactPlanRoots": {
                        "type": "array",
                        "xml": {
                            "name": "artifact_plan_roots"
                        },
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "artifact_plan_roots"
                            }
                        }
                    },
                    "buildLogJobRoots": {
                        "type": "object",
                        "xml": {
                            "name": "build_log_job_roots"
                        }
                    },
                    "isBranchBuild": {
                        "type": "boolean"
                    },
                    "storageTag": {
                        "type": "string"
                    }
                }
            },
            "DockerPipelineConfiguration": {
                "properties": {
                    "dataVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataVolume"
                        }
                    },
                    "image": {
                        "type": "string"
                    },
                    "additionalArgs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "Environment": {
                "properties": {
                    "operations": {
                        "$ref": "#/components/schemas/Operations"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    },
                    "configurationState": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DETAILED",
                            "TASKED"
                        ]
                    },
                    "deploymentProjectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "requirementSet": {
                        "$ref": "#/components/schemas/ImmutableRequirementSet"
                    },
                    "taskDefinitionsSupplier": {
                        "type": "object"
                    },
                    "triggerDefinitionsSupplier": {
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "$ref": "#/components/schemas/DeploymentKey"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "triggerDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDefinition"
                        }
                    }
                }
            },
            "EnvironmentIds": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            },
            "EnvironmentStatus": {
                "type": "object",
                "properties": {
                    "deploymentResult": {
                        "$ref": "#/components/schemas/DeploymentResult"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/Environment"
                    },
                    "latestResult": {
                        "$ref": "#/components/schemas/DeploymentResult"
                    }
                }
            },
            "ExpiryConfig": {
                "properties": {
                    "expiryTypeNothing": {
                        "type": "boolean"
                    },
                    "expiryTypeResult": {
                        "type": "boolean"
                    },
                    "expiryTypeArtifact": {
                        "type": "boolean"
                    },
                    "expiryBuildLog": {
                        "type": "boolean"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "period": {
                        "type": "string"
                    },
                    "labelsList": {
                        "type": "string"
                    },
                    "buildsToKeep": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maximumBuildsToKeep": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ExpressionEngine": {
            },
            "ExtraBuildResultsData": {
                "properties": {
                    "buildReturnCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "buildErrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "FilteredTestResultsTestClassResult": {
                "properties": {
                    "fixedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "skippedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "newFailedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "existingFailedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "allFailedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "quarantinedTests": {
                        "$ref": "#/components/schemas/MultimapTestClassResultTestCaseResult"
                    },
                    "allFailedTestList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    },
                    "skippedTestList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    }
                }
            },
            "TestResultsDetails": {
                "properties": {
                     "expand": {
                        "type": "string",
                        "example": "allTests,successfulTests,failedTests,newFailedTests,existingFailedTests,fixedTests,quarantinedTests,skippedTests"
                    },
                    "all": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successful": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "newFailed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "existingFailed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fixed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quarantined": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skipped": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "allTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "successfulTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "failedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "newFailedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "existingFailedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "fixedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "quarantinedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "skippedTests": {
                        "$ref": "#/components/schemas/TestResultsResult"
                    },
                    "allFailedTestList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    },
                    "skippedTestList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    }
                }
            },
            "HierarchicalConfiguration": {
                "properties": {
                    "errorListeners": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "detailEvents": {
                        "type": "boolean"
                    },
                    "listDelimiter": {
                        "type": "string"
                    },
                    "delimiterParsingDisabled": {
                        "type": "boolean"
                    },
                    "throwExceptionOnMissing": {
                        "type": "boolean"
                    },
                    "substitutor": {
                        "$ref": "#/components/schemas/StrSubstitutor"
                    },
                    "root": {
                        "$ref": "#/components/schemas/Node"
                    },
                    "rootNode": {
                        "$ref": "#/components/schemas/ConfigurationNode"
                    },
                    "expressionEngine": {
                        "$ref": "#/components/schemas/ExpressionEngine"
                    },
                    "keys": {
                        "type": "object"
                    },
                    "logger": {
                        "$ref": "#/components/schemas/Log"
                    },
                    "interpolator": {
                        "$ref": "#/components/schemas/ConfigurationInterpolator"
                    },
                    "configurationListeners": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "ImmutableArtifactDefinition": {
                "properties": {
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableArtifactSubscription"
                        }
                    },
                    "producerJob": {
                        "$ref": "#/components/schemas/ImmutableJob"
                    },
                    "copyPattern": {
                        "type": "string"
                    },
                    "httpCompressionOn": {
                        "type": "boolean"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "exclusionPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "copyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sharedArtifact": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    }
                }
            },
            "ImmutableArtifactSubscription": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "destinationDirectory": {
                        "type": "string"
                    },
                    "consumerJob": {
                        "$ref": "#/components/schemas/ImmutableJob"
                    },
                    "artifactDefinition": {
                        "$ref": "#/components/schemas/ImmutableArtifactDefinition"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ImmutableChain": {
                "properties": {
                    "notificationSet": {
                        "$ref": "#/components/schemas/NotificationSet"
                    },
                    "allJobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableJob"
                        }
                    },
                    "storageTag": {
                        "$ref": "#/components/schemas/ChainStorageTag"
                    },
                    "vcsBambooSpecsSource": {
                        "$ref": "#/components/schemas/ImmutableVcsBambooSpecsSource"
                    },
                    "stages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableChainStage"
                        }
                    },
                    "allStages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableChainStage"
                        }
                    },
                    "jobCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "effectiveRepositoryDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepositoryDefinition"
                        }
                    },
                    "lastResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "planRepositoryDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlanRepositoryDefinition"
                        }
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "master": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "latestResultsSummary": {
                        "$ref": "#/components/schemas/ImmutableResultsSummary"
                    },
                    "buildDefinition": {
                        "$ref": "#/components/schemas/BuildDefinition"
                    },
                    "busy": {
                        "type": "boolean"
                    },
                    "executing": {
                        "type": "boolean"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentStatus": {
                        "type": "string"
                    },
                    "buildLogger": {
                        "$ref": "#/components/schemas/BuildLogger"
                    },
                    "firstBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "averageBuildDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "effectiveVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "JOB",
                            "CHAIN_BRANCH"
                        ]
                    },
                    "suspendedFromBuilding": {
                        "type": "boolean"
                    },
                    "masterIdIfExists": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "masterId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "databaseId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "triggerDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDefinition"
                        }
                    }
                }
            },
            "ImmutableChainStage": {
                "properties": {
                    "jobs": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableJob"
                        }
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "databaseId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "manual": {
                        "type": "boolean"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "final": {
                        "type": "boolean"
                    },
                    "master": {
                        "$ref": "#/components/schemas/ImmutableChainStage"
                    },
                    "description": {
                        "type": "string"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    }
                }
            },
            "ImmutableJob": {
                "properties": {
                    "requirementSet": {
                        "$ref": "#/components/schemas/RequirementSet"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "parent": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "master": {
                        "$ref": "#/components/schemas/ImmutableJob"
                    },
                    "stage": {
                        "$ref": "#/components/schemas/ImmutableChainStage"
                    },
                    "divergent": {
                        "type": "boolean"
                    },
                    "artifactDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableArtifactDefinition"
                        }
                    },
                    "artifactSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableArtifactSubscription"
                        }
                    },
                    "effectiveRequirementSet": {
                        "$ref": "#/components/schemas/RequirementSet"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "latestResultsSummary": {
                        "$ref": "#/components/schemas/ImmutableResultsSummary"
                    },
                    "buildDefinition": {
                        "$ref": "#/components/schemas/BuildDefinition"
                    },
                    "busy": {
                        "type": "boolean"
                    },
                    "executing": {
                        "type": "boolean"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentStatus": {
                        "type": "string"
                    },
                    "buildLogger": {
                        "$ref": "#/components/schemas/BuildLogger"
                    },
                    "firstBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "averageBuildDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "effectiveVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "JOB",
                            "CHAIN_BRANCH"
                        ]
                    },
                    "suspendedFromBuilding": {
                        "type": "boolean"
                    },
                    "masterIdIfExists": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "masterId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "databaseId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    }
                }
            },
            "ImmutableListCommit": {
                "properties": {
                }
            },
            "ImmutableListVariableSubstitutionContext": {
                "properties": {
                }
            },
            "ImmutableMapStringString": {
                "properties": {
                }
            },
            "ImmutablePlan": {
                "properties": {
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "latestResultsSummary": {
                        "$ref": "#/components/schemas/ImmutableResultsSummary"
                    },
                    "buildDefinition": {
                        "$ref": "#/components/schemas/BuildDefinition"
                    },
                    "busy": {
                        "type": "boolean"
                    },
                    "executing": {
                        "type": "boolean"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentStatus": {
                        "type": "string"
                    },
                    "buildLogger": {
                        "$ref": "#/components/schemas/BuildLogger"
                    },
                    "firstBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "averageBuildDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "effectiveVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "master": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "JOB",
                            "CHAIN_BRANCH"
                        ]
                    },
                    "suspendedFromBuilding": {
                        "type": "boolean"
                    },
                    "masterIdIfExists": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "masterId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "databaseId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    }
                }
            },
            "ImmutableRequirement": {
                "properties": {
                    "typeOfMatch": {
                        "type": "string",
                        "enum": [
                            "EXISTS",
                            "EQUALS",
                            "MATCHES"
                        ]
                    },
                    "matchValue": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "boolean"
                    },
                    "ownerId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "regexMatch": {
                        "type": "boolean"
                    },
                    "pluginModuleKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ImmutableRequirementSet": {
                "properties": {
                    "requirements": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ImmutableRequirement"
                        }
                    }
                }
            },
            "ImmutableResultsSummary": {
                "properties": {
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "repositoryChangesets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepositoryChangeset"
                        }
                    },
                    "successful": {
                        "type": "boolean"
                    },
                    "failed": {
                        "type": "boolean"
                    },
                    "notRunYet": {
                        "type": "boolean"
                    },
                    "notBuilt": {
                        "type": "boolean"
                    },
                    "planName": {
                        "type": "string"
                    },
                    "immutablePlan": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "inProgress": {
                        "type": "boolean"
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsumedSubscription"
                        }
                    },
                    "planIfExists": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "durationDescription": {
                        "type": "string"
                    },
                    "relativeBuildDate": {
                        "type": "string"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "queueTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "testSummary": {
                        "type": "string"
                    },
                    "testResultsSummary": {
                        "$ref": "#/components/schemas/TestResultsSummary"
                    },
                    "jiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "buildCompletedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "restartCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "onceOff": {
                        "type": "boolean"
                    },
                    "immutableChain": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "commits": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/Commit"
                        }
                    },
                    "queued": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "waiting": {
                        "type": "boolean"
                    },
                    "customBuildData": {
                        "type": "object"
                    },
                    "fixingJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "relatedJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "jiraIssueKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uniqueAuthors": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Author"
                        }
                    },
                    "timeToFix": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDurationDescription": {
                        "type": "string"
                    },
                    "shortReasonSummary": {
                        "type": "string"
                    },
                    "relativeQueueDate": {
                        "type": "string"
                    },
                    "relativeBuildStartedDate": {
                        "type": "string"
                    },
                    "buildTime": {
                        "type": "string"
                    },
                    "artifactLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "artifactLinksThatExist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "changesListSummary": {
                        "type": "string"
                    },
                    "substitutedVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "variableContextLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "manuallyOverriddenVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "buildAgentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fullPlanName": {
                        "type": "string"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    },
                    "deltaState": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "PASSING",
                            "FAILING",
                            "BROKEN",
                            "FIXED"
                        ]
                    },
                    "customBuild": {
                        "type": "boolean"
                    },
                    "rebuild": {
                        "type": "boolean"
                    },
                    "logSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "buildCancelledDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "statDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ImmutableVcsBambooSpecsSource": {
                "properties": {
                    "vcsLocationBambooSpecsState": {
                        "$ref": "#/components/schemas/ImmutableVcsLocationBambooSpecsState"
                    },
                    "yamlConfiguration": {
                        "type": "boolean"
                    },
                    "sourceLocation": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ImmutableVcsLocationBambooSpecsState": {
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "vcsLocationId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "specsExecutionDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "specImportState": {
                        "type": "string",
                        "enum": [
                            "SUCCESS",
                            "ERROR"
                        ]
                    },
                    "specsNotFound": {
                        "type": "boolean"
                    },
                    "logFilename": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    }
                }
            },
            "JiraAssignee": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "JiraIssueDetails": {
                "properties": {
                    "issueKey": {
                        "type": "string"
                    },
                    "displayUrl": {
                        "type": "string",
                        "format": "url"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/JiraAssignee"
                    },
                    "fixVersions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/JiraType"
                    },
                    "status": {
                        "$ref": "#/components/schemas/JiraStatus"
                    },
                    "summary": {
                        "type": "string"
                    }
                }
            },
            "JiraStatus": {
                "properties": {
                    "statusDescription": {
                        "type": "string"
                    },
                    "statusIconUrl": {
                        "type": "string"
                    }
                }
            },
            "JiraType": {
                "properties": {
                    "typeIconUrl": {
                        "type": "string"
                    },
                    "typeDescription": {
                        "type": "string"
                    }
                }
            },
            "JsonArray": {
                "properties": {
                    "asString": {
                        "type": "string"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asNumber": {
                        "type": "number"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    }
                }
            },
            "JsonElement": {
                "properties": {
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    },
                    "asNumber": {
                        "type": "number"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JsonNull": {
                "properties": {
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    },
                    "asNumber": {
                        "type": "number"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JsonObject": {
                "properties": {
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    },
                    "asNumber": {
                        "type": "number"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JsonPrimitive": {
                "properties": {
                    "asString": {
                        "type": "string"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "number": {
                        "type": "boolean"
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "asNumber": {
                        "type": "number"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "string": {
                        "type": "boolean"
                    },
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    }
                }
            },
            "JsonSearchResultsList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "searchResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonElement"
                        }
                    },
                    "json": {
                        "$ref": "#/components/schemas/JsonElement"
                    }
                }
            },
            "Key": {
                "properties": {
                    "key": {
                        "type": "string"
                    }
                }
            },
            "Label": {
                "properties": {
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "lastModificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Labelling": {
                "properties": {
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "label": {
                        "$ref": "#/components/schemas/Label"
                    },
                    "buildResultsSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "lastModificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Link": {
                "properties": {
                    "href": {
                        "type": "string",
                        "format": "uri",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "rel": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                }
            },
            "LinkedJiraIssue": {
                "properties": {
                    "resultsSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "issueType": {
                        "type": "string",
                        "enum": [
                            "BUILD_RELATES",
                            "BUILD_FIXES",
                            "BUILD_CAUSES"
                        ]
                    },
                    "issueKey": {
                        "type": "string"
                    },
                    "jiraIssueDetails": {
                        "$ref": "#/components/schemas/JiraIssueDetails"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
             "ListWrapperCallbackRestArtifactDefinition": {
            },
            "ListWrapperCallbackRestBranch": {
            },
            "ListWrapperCallbackRestBuildArtifact": {
            },
            "ListWrapperCallbackRestBuildLabel": {
            },
            "ListWrapperCallbackRestCapability": {
            },
            "ListWrapperCallbackBuildChange": {
            },
            "ListWrapperCallbackBuildChangeFile": {
            },
            "ListWrapperCallbackRestComment": {
            },
            "ListWrapperCallbackRestEnvironment": {
            },
            "ListWrapperCallbackRestGlobalVariable": {
            },
            "ListWrapperCallbackRestJiraIssue": {
            },
            "ListWrapperCallbackRestJob": {
            },
            "ListWrapperCallbackBuildPlan": {
            },
            "ListWrapperCallbackBuildPlanAction": {
            },
            "ListWrapperCallbackBuildPlanBranch": {
            },
            "ListWrapperCallbackBuildPlanLabel": {
                "type": "object"
            },
            "ListWrapperCallbackRestProject": {
            },
            "ListWrapperCallbackRestQueuedBuild": {
            },
            "ListWrapperCallbackRestQueuedDeployment": {
            },
            "ListWrapperCallbackRestReport": {
            },
            "ListWrapperCallbackRestRepository": {
            },
            "ListWrapperCallbackRestResource": {
            },
            "ListWrapperCallbackRestStage": {
            },
            "ListWrapperCallbackBuildStage": {
            },
            "ListWrapperCallbackBuildVariable": {
            },
            "ListWrapperCallbackBuildVariableDefinitionContext": {
            },
            "ListWrapperCallbackResult": {
            },
            "Log": {
                "properties": {
                    "debugEnabled": {
                        "type": "boolean"
                    },
                    "warnEnabled": {
                        "type": "boolean"
                    },
                    "traceEnabled": {
                        "type": "boolean"
                    },
                    "infoEnabled": {
                        "type": "boolean"
                    },
                    "errorEnabled": {
                        "type": "boolean"
                    },
                    "fatalEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "LogInterceptorStack": {
            },
            "LogMutatorStack": {
            },
            "ManualEncryptionRequest": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "Password123"
                    }
                }
            },
            "ManualEncryptionResponse": {
                "properties": {
                    "encryptedText": {
                        "type": "string",
                        "example": "BAMSCRT@0@0@6WC1Z7Vl7tYo+w6Kx4Oasw=="
                    }
                }
            },
            "MergeResultSummary": {
                "properties": {
                    "branchName": {
                        "type": "string"
                    },
                    "mergeState": {
                        "type": "string",
                        "enum": [
                            "NOT_ATTEMPTED",
                            "TO_BE_ATTEMPTED",
                            "IN_PROGRESS",
                            "SUCCESS",
                            "FAILED",
                            "NOT_REQUIRED"
                        ]
                    },
                    "pushState": {
                        "type": "string",
                        "enum": [
                            "NOT_ATTEMPTED",
                            "TO_BE_ATTEMPTED",
                            "IN_PROGRESS",
                            "SUCCESS",
                            "FAILED",
                            "NOT_REQUIRED"
                        ]
                    },
                    "integrationStrategy": {
                        "type": "string",
                        "enum": [
                            "BRANCH_UPDATER",
                            "GATE_KEEPER"
                        ]
                    },
                    "integrationRepositoryBranchName": {
                        "type": "string"
                    },
                    "emptyMerge": {
                        "type": "boolean"
                    },
                    "failureReason": {
                        "type": "string"
                    },
                    "branchTargetVcsKey": {
                        "type": "string"
                    },
                    "integrationRepositoryId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "integrationBranchVcsKey": {
                        "type": "string"
                    },
                    "mergeResultVcsKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestResultSummary": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "MultimapTestClassResultTestCaseResult": {
                "properties": {
                }
            },
            "MutableArtifact": {
                "properties": {
                    "sharedArtifact": {
                        "type": "boolean"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "label": {
                        "type": "string"
                    },
                    "globallyStored": {
                        "type": "boolean"
                    },
                    "archiverType": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "ZIP"
                        ]
                    },
                    "linkType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Node": {
                "properties": {
                    "children": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "parent": {
                        "$ref": "#/components/schemas/Node"
                    },
                    "value": {
                        "type": "object"
                    },
                    "reference": {
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "attribute": {
                        "type": "boolean"
                    },
                    "parentNode": {
                        "$ref": "#/components/schemas/ConfigurationNode"
                    },
                    "defined": {
                        "type": "boolean"
                    },
                    "attributeCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "childrenCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "NotificationManager": {
                "properties": {
                    "allNotificationTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationType"
                        }
                    },
                    "systemNotificationTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationType"
                        }
                    },
                    "deploymentNotificationTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationType"
                        }
                    },
                    "planNotificationTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationType"
                        }
                    },
                    "chainNotificationTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationType"
                        }
                    },
                    "allNotificationRecipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationRecipient"
                        }
                    }
                }
            },
            "NotificationRecipient": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "scopes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "CHAIN",
                                "SYSTEM",
                                "DEPLOYMENT"
                            ]
                        }
                    },
                    "moduleDescriptor": {
                        "$ref": "#/components/schemas/WeightedDescriptor"
                    },
                    "viewHtml": {
                        "type": "string"
                    },
                    "transports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationTransport"
                        }
                    },
                    "recipientConfig": {
                        "type": "string"
                    },
                    "editHtml": {
                        "type": "string"
                    }
                }
            },
            "NotificationRule": {
                "properties": {
                    "notificationSet": {
                        "$ref": "#/components/schemas/NotificationSet"
                    },
                    "conditionData": {
                        "type": "string"
                    },
                    "notificationTypeForView": {
                        "type": "object"
                    },
                    "notificationManager": {
                        "$ref": "#/components/schemas/NotificationManager"
                    },
                    "recipient": {
                        "type": "string"
                    },
                    "recipientType": {
                        "type": "string"
                    },
                    "conditionKey": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "NotificationSet": {
                "properties": {
                    "notificationRules": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationRule"
                        }
                    },
                    "notificationSetType": {
                        "type": "string",
                        "enum": [
                            "PLAN",
                            "SYSTEM"
                        ]
                    },
                    "sortedNotificationRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationRule"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "NotificationTransport": {
            },
            "NotificationType": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string",
                        "enum": [
                            "PLAN",
                            "CHAIN",
                            "SYSTEM",
                            "DEPLOYMENT"
                        ]
                    },
                    "moduleDescriptor": {
                        "$ref": "#/components/schemas/WeightedDescriptor"
                    },
                    "configurationData": {
                        "type": "string"
                    },
                    "viewHtml": {
                        "type": "string"
                    },
                    "editHtml": {
                        "type": "string"
                    }
                }
            },
            "Operations": {
                "properties": {
                    "canEdit": {
                        "type": "boolean"
                    },
                    "canView": {
                        "type": "boolean"
                    },
                    "canViewConfiguration": {
                        "type": "boolean"
                    },
                    "canExecute": {
                        "type": "boolean"
                    },
                    "cantExecuteReason": {
                        "type": "string"
                    },
                    "canDelete": {
                        "type": "boolean"
                    },
                    "allowedToExecute": {
                        "type": "boolean"
                    },
                    "allowedToCreateVersion": {
                        "type": "boolean"
                    },
                    "allowedToSetVersionStatus": {
                        "type": "boolean"
                    }
                }
            },
            "PipelineDefinition": {
                "properties": {
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "REMOTE",
                            "ELASTIC"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "lastModificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Plan": {
                "properties": {
                    "latestResultsSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "suspendedFromBuilding": {
                        "type": "boolean"
                    },
                    "buildDefinitionXml": {
                        "$ref": "#/components/schemas/BuildDefinitionForBuild"
                    },
                    "labellings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Labelling"
                        }
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "master": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "buildDefinition": {
                        "$ref": "#/components/schemas/BuildDefinition"
                    },
                    "busy": {
                        "type": "boolean"
                    },
                    "executing": {
                        "type": "boolean"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentStatus": {
                        "type": "string"
                    },
                    "buildLogger": {
                        "$ref": "#/components/schemas/BuildLogger"
                    },
                    "firstBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "averageBuildDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "effectiveVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableDefinition"
                        }
                    },
                    "planType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "JOB",
                            "CHAIN_BRANCH"
                        ]
                    },
                    "masterIdIfExists": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "masterId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "databaseId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PlanKey": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "partialKey": {
                        "type": "string"
                    }
                }
            },
            "PlanRepositoryDefinition": {
                "properties": {
                    "bambooSpecsDetectionOptions": {
                        "$ref": "#/components/schemas/VcsBambooSpecsDetectionOptions"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "vcsLocation": {
                        "$ref": "#/components/schemas/VcsLocationDefinition"
                    },
                    "rootVcsRepositoryId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "branch": {
                        "$ref": "#/components/schemas/VcsBranchDefinition"
                    },
                    "linked": {
                        "type": "boolean"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "vcsChangeDetectionOptions": {
                        "$ref": "#/components/schemas/VcsChangeDetectionOptions"
                    },
                    "vcsBranchDetectionOptions": {
                        "$ref": "#/components/schemas/VcsBranchDetectionOptions"
                    },
                    "viewerConfiguration": {
                        "$ref": "#/components/schemas/VcsRepositoryViewerDefinition"
                    },
                    "legacyRepository": {
                        "type": "boolean"
                    },
                    "parentOid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "rootVcsLinked": {
                        "type": "boolean"
                    },
                    "rootVcsProject": {
                        "type": "boolean"
                    },
                    "rootVcsShared": {
                        "type": "boolean"
                    },
                    "parentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "pluginKey": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PlanResultKey": {
                "properties": {
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "entityKey": {
                        "$ref": "#/components/schemas/Key"
                    },
                    "resultNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "resultNumberLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "type": "string"
                    }
                }
            },
            "PlanWithCustomExpirySettings": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "planName": {
                        "type": "string"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "configLink": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "expiryConfig": {
                        "$ref": "#/components/schemas/ExpiryConfig"
                    }
                }
            },
            "Project": {
                "properties": {
                    "vcsBambooSpecsSource": {
                        "$ref": "#/components/schemas/VcsBambooSpecsSource"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "currentStatus": {
                        "type": "string"
                    },
                    "labellings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Labelling"
                        }
                    },
                    "relatedLabellings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Labelling"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "QuarantineStatistics": {
                "properties": {
                    "quarantineDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "quarantiningUsername": {
                        "type": "string"
                    },
                    "quarantineExpiryDate": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ReindexBean": {
                "properties": {
                    "reindexInProgress": {
                        "type": "boolean"
                    },
                    "reindexPending": {
                        "type": "boolean"
                    }
                }
            },
            "Repository": {
                "properties": {
                    "locationIdentifier": {
                        "type": "string"
                    },
                    "shortKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "RepositoryChangeset": {
                "properties": {
                    "resultsSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "changesetId": {
                        "type": "string"
                    },
                    "repositoryData": {
                        "$ref": "#/components/schemas/RepositoryDataEntity"
                    },
                    "commits": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Commit"
                        }
                    },
                    "skippedCommitsCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "buildTrigger": {
                        "type": "boolean"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RepositoryDataEntity": {
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/RepositoryDataEntity"
                    },
                    "pluginKey": {
                        "type": "string"
                    },
                    "xmlData": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    }
                }
            },
            "RepositoryDefinition": {
                "properties": {
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/HierarchicalConfiguration"
                    },
                    "repository": {
                        "$ref": "#/components/schemas/Repository"
                    },
                    "webRepositoryPluginKey": {
                        "type": "string"
                    },
                    "webRepositoryViewer": {
                        "$ref": "#/components/schemas/WebRepositoryViewer"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "newRepositoryInstance": {
                        "$ref": "#/components/schemas/Repository"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "pluginKey": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Requirement": {
                "properties": {
                    "requirementSet": {
                        "$ref": "#/components/schemas/RequirementSet"
                    },
                    "key": {
                        "type": "string"
                    },
                    "regexMatch": {
                        "type": "boolean"
                    },
                    "systemRequirement": {
                        "type": "boolean"
                    },
                    "readonly": {
                        "type": "boolean"
                    },
                    "pluginModuleKey": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "matchType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "typeOfMatch": {
                        "type": "string",
                        "enum": [
                            "EXISTS",
                            "EQUALS",
                            "MATCHES"
                        ]
                    },
                    "matchValue": {
                        "type": "string"
                    }
                }
            },
            "RequirementOperations": {
                "properties": {
                    "canDelete": {
                        "type": "boolean"
                    }
                }
            },
            "RequirementReadonlyData": {
                "properties": {
                    "matchingAgents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "matchingImages": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RequirementSet": {
                "properties": {
                    "requirements": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Requirement"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestAccessToken": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "rawToken": {
                        "type": "string"
                    }
                }
            },
            "RestAgent": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 131073
                    },
                    "type": {
                        "type": "string",
                        "example": "local"
                    },
                    "name": {
                        "type": "string",
                        "example": "Default Agent"
                    },
                    "description": {
                        "type": "string",
                        "example": "This is a description"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "link": {
                        "type": "string",
                        "example": "https://bamboo/rest/admin/latest/agent/131073"
                    }
                }
            },
            "RestAgentAssignmentExecutorDetails": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "AGENT",
                            "IMAGE"
                        ]
                    },
                    "agentType": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "REMOTE",
                            "ELASTIC"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "capabilitiesMatch": {
                        "type": "boolean"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "removable": {
                        "type": "boolean"
                    }
                }
            },
            "RestAgentCapabilities": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestCapability"
                    },
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestCapability"
                        }
                    },
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestCapability"
                        }
                    }
                }
            },
            "RestAgentInformation": {
                "properties": {
                    "general": {
                        "$ref": "#/components/schemas/RestBuildAgent"
                    },
                    "capabilities": {
                        "$ref": "#/components/schemas/RestAgentCapabilities"
                    },
                    "executableEnvironments": {
                        "$ref": "#/components/schemas/RestExecutableEnvironmentList"
                    },
                    "executableJobs": {
                        "$ref": "#/components/schemas/RestExecutableJobList"
                    },
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "restAgentExecutableJobs": {
                        "$ref": "#/components/schemas/RestExecutableJobList"
                    },
                    "restAgentExecutableEnvironments": {
                        "$ref": "#/components/schemas/RestExecutableEnvironmentList"
                    }
                }
            },
            "RestAgentSummary": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "RestAnonymousServerStatusInfo": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "SETUP",
                            "STARTING",
                            "RUNNING",
                            "PAUSING",
                            "PREPARING_FOR_RESTART",
                            "READY_FOR_RESTART",
                            "PAUSED"
                        ]
                    }
                }
            },
            "RestArtifactDefinition": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "copyPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "exclusionPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shared": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    }
                }
            },
            "RestArtifactDefinitionList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestArtifactDefinition"
                    },
                    "artifacts": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RestArtifactDefinition"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestArtifactDefinition"
                        }
                    }
                }
            },
            "RestArtifactDefinitions": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "artifacts": {
                        "$ref": "#/components/schemas/RestArtifactDefinitionList"
                    }
                }
            },
            "RestArtifactHandler": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "sharedArtifactsEnabled": {
                        "type": "boolean"
                    },
                    "nonsharedArtifactsEnabled": {
                        "type": "boolean"
                    },
                    "attributes": {
                        "type": "object"
                    }
                }
            },
            "RestAuditLogConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "auditLoggingEnabled": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "RestBranch": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "RestBranchList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestBranch"
                    },
                    "searchResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBranch"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBranch"
                        }
                    }
                }
            },
            "RestBranches": {
            },
            "RestBruteForceProtection": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "loginAttempts": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestBuildAgent": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "agent-name"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "REMOTE",
                            "ELASTIC"
                        ]
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "busy": {
                        "type": "boolean"
                    }
                }
            },
            "RestBuildArtifact": {
                "properties": {
                    "name": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "producerJobKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "shared": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "prettySizeDescription": {
                        "type": "string",
                        "writeOnly": true
                    }
                }
            },
            "RestBuildArtifactList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestBuildArtifact"
                    },
                    "artifacts": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RestBuildArtifact"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBuildArtifact"
                        }
                    }
                }
            },
            "RestBuildConcurrency": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "buildConcurrencyEnabled": {
                        "type": "boolean"
                    },
                    "defaultConcurrentBuildsNumber": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10
                    }
                }
            },
            "RestBuildLabel": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "someLabel",
                        "xml": {
                            "attribute": true
                        }
                    }
                }
            },
            "BuildLabels": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestBuildLabel"
                    },
                    "label": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBuildLabel"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestBuildLabel"
                        }
                    }
                }
            },
            "RestBuildLabels": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "labels": {
                        "$ref": "#/components/schemas/BuildLabels"
                    }
                }
            },
            "RestBuildMonitoring": {
                "properties": {
                    "buildMonitoringEnabled": {
                        "type": "boolean"
                    },
                    "buildTimeMultiplierDefault": {
                        "type": "number",
                        "format": "double",
                        "example": 2.5
                    },
                    "logQuietMinutesTimeDefault": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10
                    },
                    "buildQueueMinutesTimeoutDefault": {
                        "type": "integer",
                        "format": "int32",
                        "example": 30
                    },
                    "liveLogsAreActive": {
                        "type": "boolean"
                    }
                }
            },
            "RestCapability": {
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "capability.key"
                    },
                    "value": {
                        "type": "string",
                        "example": "/usr/local/path"
                    }
                }
            },
            "BuildChange": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "author": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "userName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "fullName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "comment": {
                        "type": "string"
                    },
                    "changesetId": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "commitUrl": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "files": {
                        "$ref": "#/components/schemas/BuildChangedFiles"
                    }
                }
            },
            "BuildChangeFile": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    }
                }
            },
            "BuildChangedFiles": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildChangeFile"
                    },
                    "file": {
                        "type": "array",
                        "xml": {
                            "name": "file"
                        },
                        "items": {
                            "$ref": "#/components/schemas/BuildChangeFile"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildChangeFile"
                        }
                    }
                }
            },
            "BuildChanges": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildChange"
                    },
                    "expand": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "change": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildChange"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildChange"
                        }
                    }
                }
            },
            "RestChart": {
                "properties": {
                    "location": {
                        "type": "string"
                    },
                    "imageMapName": {
                        "type": "string"
                    },
                    "imageMap": {
                        "type": "string"
                    },
                    "width": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "height": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestCombinedExpiryConfiguration": {
                "properties": {
                    "duration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "period": {
                        "type": "string"
                    },
                    "buildsToKeep": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maximumBuildsToKeep": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deploymentsToKeep": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maximumIgnoredLogSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "expireResults": {
                        "type": "boolean"
                    },
                    "expireArtifacts": {
                        "type": "boolean"
                    },
                    "expireLogs": {
                        "type": "boolean"
                    },
                    "labelsToExclude": {
                        "type": "string"
                    },
                    "cronExpression": {
                        "type": "string"
                    }
                }
            },
            "RestCombinedExpiryStatus": {
                "properties": {
                    "buildExpiryStatus": {
                        "$ref": "#/components/schemas/RestExpiryStatus"
                    },
                    "deploymentExpiryStatus": {
                        "$ref": "#/components/schemas/RestExpiryStatus"
                    }
                }
            },
            "RestComment": {
                "properties": {
                    "content": {
                        "type": "string",
                        "example": "first successful build"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "xml": {
                            "attribute": true
                        }
                    },
                    "author": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    },
                    "modificationDate": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    }
                }
            },
            "RestCommentList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestComment"
                    },
                    "comment": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestComment"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestComment"
                        }
                    }
                }
            },
            "RestComments": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "comments": {
                        "$ref": "#/components/schemas/RestCommentList"
                    }
                }
            },
            "RestCreateDeploymentProjectRequest": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "publicAccess": {
                        "type": "boolean"
                    }
                },
                "xml": {
                    "name": "createDeploymentProjectRequest"
                }
            },
            "RestCreateVersionRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "nextVersionName": {
                        "type": "string"
                    },
                    "planResultKey": {
                        "type": "string"
                    }
                }
            },
            "RestDarkFeature": {
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "my.bamboo.feature.key"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                }
            },
            "RestDataVolume": {
                "properties": {
                    "hostDirectory": {
                        "type": "string"
                    },
                    "containerDirectory": {
                        "type": "string"
                    }
                }
            },
            "RestDedicatedAgent": {
                "properties": {
                    "executableType": {
                        "type": "string",
                        "enum": [
                            "Build project",
                            "Build plan",
                            "Build job",
                            "Deployment project",
                            "Deployment environment"
                        ]
                    },
                    "executableId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "executorType": {
                        "type": "string",
                        "enum": [
                            "AGENT",
                            "IMAGE"
                        ]
                    },
                    "executorId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestDependencies": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "dependencies": {
                        "$ref": "#/components/schemas/BuildPlanList"
                    }
                }
            },
            "RestDeploymentProject": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    },
                    "key": {
                        "$ref": "#/components/schemas/DeploymentKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "description": {
                        "type": "string"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironment"
                        }
                    },
                    "operations": {
                        "$ref": "#/components/schemas/RestOperations"
                    },
                    "repositorySpecsManaged": {
                        "type": "boolean"
                    },
                    "vcsBambooSpecsSource": {
                        "$ref": "#/components/schemas/ImmutableVcsBambooSpecsSource"
                    },
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    }
                }
            },
            "RestDeploymentProjectLink": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "url": {
                        "type": "string"
                    },
                    "environmentCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "upToDateEnvironmentCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestDeploymentProjectStatusForJiraIssue": {
                "properties": {
                    "deploymentProject": {
                        "$ref": "#/components/schemas/RestDeploymentProjectLink"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestDeploymentVersionLink"
                        }
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironmentStatusOfIssue"
                        }
                    }
                }
            },
            "RestDeploymentResult": {
                "properties": {
                    "deploymentVersion": {
                        "$ref": "#/components/schemas/DeploymentVersion"
                    },
                    "deploymentVersionName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deploymentState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "startedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "queuedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "executedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "key": {
                        "$ref": "#/components/schemas/DeploymentResultKey"
                    },
                    "agent": {
                        "$ref": "#/components/schemas/BuildAgent"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/RestOperations"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/Environment"
                    },
                    "environmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "agentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    },
                    "customData": {
                        "type": "object",
                        "properties": {
                        }
                    }
                }
            },
            "RestDeploymentResultList": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestDeploymentResult"
                        }
                    }
                }
            },
            "RestDeploymentVersion": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "creatorUserName": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentVersionItem"
                        }
                    },
                    "versionStatus": {
                        "$ref": "#/components/schemas/RestDeploymentVersionStatus"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/Operations"
                    },
                    "creatorDisplayName": {
                        "type": "string"
                    },
                    "creatorGravatarUrl": {
                        "type": "string"
                    },
                    "planBranchName": {
                        "type": "string"
                    },
                    "ageZeroPoint": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "deploymentProjectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "variableContext": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitutionContext"
                        }
                    }
                }
            },
            "RestDeploymentVersionAndPlanResult": {
                "properties": {
                    "deploymentVersion": {
                        "$ref": "#/components/schemas/RestDeploymentVersion"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    }
                }
            },
            "RestDeploymentVersionLink": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "RestDeploymentVersionList": {
            },
            "RestDeploymentVersionStatus": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userName": {
                        "type": "string",
                        "example": "admin"
                    },
                    "displayName": {
                        "type": "string",
                        "example": "Approved"
                    },
                    "gravatarUrl": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "versionState": {
                        "type": "string",
                        "example": "APPROVED",
                        "enum": [
                            "Unknown",
                            "Approved",
                            "Broken",
                            "Incomplete"
                        ]
                    }
                }
            },
            "RestDockerPipelineConfiguration": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "dockerImage": {
                        "type": "string"
                    },
                    "dataVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestDataVolume"
                        }
                    },
                    "additionalArguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestElasticConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "awsCredentialsType": {
                        "type": "string",
                        "example": "ACCESS_KEY",
                        "enum": [
                            "INSTANCE_PROFILE",
                            "ACCESS_KEY"
                        ]
                    },
                    "accessKeyId": {
                        "type": "string",
                        "example": "TEST-ACCESS-KEY-ID"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "region": {
                        "type": "string",
                        "example": "US_EAST_1"
                    },
                    "privateKeyFile": {
                        "type": "string",
                        "example": "/path/to/privateKey"
                    },
                    "certificateFile": {
                        "type": "string",
                        "example": "/path/to/certificate"
                    },
                    "uploadAwsIdentifier": {
                        "type": "boolean",
                        "xml": {
                            "name": "uploadAwsAccountIdentifierToElasticInstances"
                        }
                    },
                    "maxNumOfElasticInstances": {
                        "type": "integer",
                        "format": "int32",
                        "example": 15
                    },
                    "allocatePublicIpToVpcInstances": {
                        "type": "boolean"
                    },
                    "elasticInstanceManagement": {
                        "$ref": "#/components/schemas/RestElasticInstanceManagement"
                    },
                    "elasticTerminationConfiguration": {
                        "$ref": "#/components/schemas/RestElasticTerminationConfiguration"
                    }
                }
            },
            "RestElasticImageConfig": {
                "properties": {
                    "configurationId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "configurationName": {
                        "type": "string"
                    },
                    "configurationDescription": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "rootFsSizeOverride": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ebsEnabled": {
                        "type": "boolean"
                    },
                    "ebsSnapshotId": {
                        "type": "string"
                    },
                    "useLegacyEbsHandling": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "product": {
                        "type": "string"
                    },
                    "startupScripts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "architecture": {
                        "type": "string"
                    },
                    "platform": {
                        "type": "string"
                    },
                    "rootDeviceType": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "imageFilesVersion": {
                        "type": "string"
                    },
                    "iamInstanceProfileArnOrName": {
                        "type": "string"
                    },
                    "perSecondBillingEnabled": {
                        "type": "boolean"
                    },
                    "ebsOptimised": {
                        "type": "boolean"
                    },
                    "legacyEbsHandlingEnabled": {
                        "type": "boolean"
                    },
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestElasticInstanceLog": {
                "properties": {
                    "instanceId": {
                        "type": "string"
                    },
                    "log": {
                        "type": "string"
                    }
                }
            },
            "RestElasticInstanceManagement": {
                "properties": {
                    "type": {
                        "type": "string",
                        "example": "Custom"
                    },
                    "idleAgentShutdownDelayMinutes": {
                        "type": "integer",
                        "format": "int32",
                        "example": 5
                    },
                    "allowedNonBambooInstances": {
                        "type": "integer",
                        "format": "int32",
                        "example": 3
                    },
                    "maxNumOfInstancesStart": {
                        "type": "integer",
                        "format": "int32",
                        "example": 7
                    },
                    "numOfBuildsInQueue": {
                        "type": "integer",
                        "format": "int32",
                        "example": 5
                    },
                    "numOfElasticBuildsInQueue": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "avgQueueTimeMinutes": {
                        "type": "integer",
                        "format": "int32",
                        "example": 10
                    }
                }
            },
            "RestElasticTerminationConfiguration": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "shutdownDelay": {
                        "type": "integer",
                        "format": "int32",
                        "example": 300
                    }
                }
            },
            "RestEnableContainer": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    }
                }
            },
            "RestEnvironment": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deploymentProjectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/RestOperations"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "configurationState": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DETAILED",
                            "TASKED"
                        ]
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "triggerDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDefinition"
                        }
                    },
                    "requirementSet": {
                        "$ref": "#/components/schemas/ImmutableRequirementSet"
                    },
                    "taskDefinitionsSupplier": {
                        "type": "object"
                    },
                    "triggerDefinitionsSupplier": {
                        "type": "object"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    }
                }
            },
            "RestEnvironmentForExecutablesView": {
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "environmentName": {
                        "type": "string"
                    }
                }
            },
            "RestEnvironmentStatusForDashboard": {
                "type": "object",
                "properties": {
                    "deploymentResultId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deploymentState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "deploymentVersionId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deploymentVersionName": {
                        "type": "string"
                    },
                    "deploymentVersionRelatedBranchName": {
                        "type": "string"
                    },
                    "deploymentVersionState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Approved",
                            "Broken",
                            "Incomplete"
                        ]
                    },
                    "environmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "executedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "queuedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "startedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "versionStatusGravatarUrl": {
                        "type": "string"
                    },
                    "versionStatusUserDisplayName": {
                        "type": "string"
                    },
                    "versionStatusUserName": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "environmentStatus"
                }
            },
            "RestEnvironmentStatusOfIssue": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "issueStatus": {
                        "type": "string",
                        "enum": [
                            "NOT_AVAILABLE",
                            "PARTIALLY_AVAILABLE",
                            "AVAILABLE"
                        ]
                    },
                    "statusOk": {
                        "type": "boolean"
                    },
                    "version": {
                        "$ref": "#/components/schemas/RestDeploymentVersionLink"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "RestEnvironmentWithConfigCounts": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deploymentProjectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/RestOperations"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "configurationState": {
                        "type": "string",
                        "enum": [
                            "CREATED",
                            "DETAILED",
                            "TASKED"
                        ]
                    },
                    "compatibleAgentsCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "notificationsCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "variablesCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "triggersCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "triggerDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDefinition"
                        }
                    },
                    "requirementSet": {
                        "$ref": "#/components/schemas/ImmutableRequirementSet"
                    },
                    "taskDefinitionsSupplier": {
                        "type": "object"
                    },
                    "triggerDefinitionsSupplier": {
                        "type": "object"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    }
                }
            },
            "RestExecutableEnvironmentList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestEnvironment"
                    },
                    "executableEnvironments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironment"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironment"
                        }
                    }
                }
            },
            "RestExecutableJobList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestJob"
                    },
                    "executableJobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestJob"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestJob"
                        }
                    }
                }
            },
            "RestExpiryStatus": {
                "properties": {
                    "running": {
                        "type": "boolean"
                    },
                    "lastRun": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastRunDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastFinished": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastFinishedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastRunSuccessful": {
                        "type": "boolean"
                    }
                }
            },
            "RestFavicon": {
                "properties": {
                    "faviconUrl": {
                        "type": "string"
                    },
                    "faviconType": {
                        "type": "string"
                    }
                }
            },
            "RestGeneralConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "instanceName": {
                        "type": "string",
                        "example": "CI instance"
                    },
                    "baseUrl": {
                        "type": "string",
                        "example": "http://bamboo.local"
                    },
                    "gravatarServerUrl": {
                        "type": "string"
                    },
                    "brokerUrl": {
                        "type": "string",
                        "example": "nio://localhost:5555"
                    },
                    "brokerClientUrl": {
                        "type": "string",
                        "example": "tcp://bamboo.local:5555"
                    },
                    "dashboardDefaultPageSize": {
                        "type": "integer",
                        "format": "int32",
                        "example": 50
                    },
                    "branchDetectionIntervalSeconds": {
                        "type": "integer",
                        "format": "int32",
                        "example": 100
                    },
                    "enableGravatarSupport": {
                        "type": "boolean"
                    },
                    "enableGzipCompression": {
                        "type": "boolean"
                    },
                    "enableRssPolling": {
                        "type": "boolean"
                    },
                    "rssPollingCronExpression": {
                        "type": "string",
                        "example": "0 7 * ? * *"
                    }
                }
            },
            "RestGlobalVariable": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1000
                    },
                    "name": {
                        "type": "string",
                        "example": "name"
                    },
                    "value": {
                        "type": "string",
                        "example": "value"
                    },
                    "link": {
                        "type": "string",
                        "readOnly": true,
                        "example": "http://bamboo/rest/admin/latest/globalVariable/1000"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "readOnly": true
                    }
                }
            },
            "RestGlobalVariableList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestGlobalVariable"
                    },
                    "globalVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestGlobalVariable"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestGlobalVariable"
                        }
                    }
                }
            },
            "RestGlobalVariables": {
                "properties": {
                    "link": {
                        "type": "string"
                    },
                    "globalVariables": {
                        "$ref": "#/components/schemas/RestGlobalVariableList"
                    }
                }
            },
            "RestGroup": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "bamboo-admin"
                    },
                    "editable": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    }
                }
            },
            "RestGroupPermission": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "bamboo-admin"
                    },
                    "editable": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestIMServerConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "host": {
                        "type": "string",
                        "example": "im.server.com"
                    },
                    "username": {
                        "type": "string",
                        "example": "bamboo_user"
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "resource": {
                        "type": "string",
                        "example": "test"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32",
                        "example": 8888
                    },
                    "requireTLSSSLConnection": {
                        "type": "boolean"
                    }
                }
            },
            "RestIdContainer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestInfo": {
                "properties": {
                    "version": {
                        "type": "string",
                        "example": "8.2.0"
                    },
                    "edition": {
                        "type": "string"
                    },
                    "buildDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildNumber": {
                        "type": "string",
                        "example": "80204"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "SETUP",
                            "STARTING",
                            "RUNNING",
                            "PAUSING",
                            "PREPARING_FOR_RESTART",
                            "READY_FOR_RESTART",
                            "PAUSED"
                        ]
                    }
                }
            },
            "RestJiraIssue": {
                "properties": {
                    "key": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "summary": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "iconUrl": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "issueType": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "status": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "url": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "JiraIssues": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestJiraIssue"
                    },
                    "issue": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RestJiraIssue"
                        }
                     },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestJiraIssue"
                        }
                    }
                }
            },
            "RestJiraIssueRelatedDeploymentProjects": {
                "properties": {
                    "deploymentProjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestDeploymentProjectLink"
                        }
                    }
                }
            },
            "RestJob": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "key": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "sourceJobKey": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "stageId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "stage": {
                        "$ref": "#/components/schemas/RestStage"
                    },
                    "agentSummary": {
                        "$ref": "#/components/schemas/RestAgentSummary"
                    }
                }
            },
            "RestKey": {
                "properties": {
                    "key": {
                        "type": "string"
                    }
                }
            },
            "RestLinkedDeploymentProject": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "RestMailConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "Amazing SMTP Server"
                    },
                    "fromAddress": {
                        "type": "string",
                        "example": "mail@mailymail.com"
                    },
                    "subjectPrefix": {
                        "type": "string",
                        "example": "[READ THIS FROM BAMBOO]"
                    },
                    "precedenceBulkHeaderExcluded": {
                        "type": "boolean"
                    },
                    "emailSetting": {
                        "type": "string",
                        "example": "SMTP"
                    },
                    "smtpServer": {
                        "type": "string",
                        "example": "mail.thisisnotarealserver.com"
                    },
                    "smtpPort": {
                        "type": "string",
                        "example": "25"
                    },
                    "smtpUsername": {
                        "type": "string",
                        "example": "user"
                    },
                    "smtpPassword": {
                        "type": "string",
                        "writeOnly": true,
                        "example": "pass"
                    },
                    "tlsEnabled": {
                        "type": "boolean"
                    },
                    "jndiLocation": {
                        "type": "string"
                    }
                }
            },
            "RestManualEncryptionConfiguration": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limitUnit": {
                        "type": "string",
                        "enum": [
                            "NANOSECONDS",
                            "MICROSECONDS",
                            "MILLISECONDS",
                            "SECONDS",
                            "MINUTES",
                            "HOURS",
                            "DAYS"
                        ]
                    }
                }
            },
            "RestNamingPreview": {
                "properties": {
                    "nextVersionName": {
                        "type": "string"
                    },
                    "subsequentVersionName": {
                        "type": "string"
                    },
                    "errorMessage": {
                        "type": "string"
                    }
                }
            },
            "RestNewUser": {
                "type": "object",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "example": "http://www.example.com/~admin/avatar.png"
                    },
                    "email": {
                        "type": "string",
                        "example": "admin@example.com"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Administrator"
                    },
                    "name": {
                        "type": "string",
                        "example": "admin"
                    },
                    "password": {
                        "type": "string",
                        "example": "new_Passw0rd"
                    },
                    "passwordConfirm": {
                        "type": "string",
                        "example": "new_Passw0rd"
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "RestNodeStatus": {
                "properties": {
                    "nodeId": {
                        "type": "string"
                    },
                    "nodeName": {
                        "type": "string"
                    },
                    "lastHeartbeat": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "primary": {
                        "type": "boolean"
                    }
                }
            },
            "RestOperations": {
                "properties": {
                    "canView": {
                        "type": "boolean"
                    },
                    "canViewConfiguration": {
                        "type": "boolean"
                    },
                    "canEdit": {
                        "type": "boolean"
                    },
                    "canDelete": {
                        "type": "boolean"
                    },
                    "allowedToExecute": {
                        "type": "boolean"
                    },
                    "canExecute": {
                        "type": "boolean"
                    },
                    "cantExecuteReason": {
                        "type": "string"
                    },
                    "allowedToCreateVersion": {
                        "type": "boolean"
                    },
                    "allowedToSetVersionStatus": {
                        "type": "boolean"
                    }
                }
            },
            "RestPageModelPlanWithCustomExpirySettings": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlanWithCustomExpirySettings"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestAccessToken": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestAccessToken"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestAgent": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestAgent"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestDeploymentProject": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestDeploymentProject"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestEnvironmentForExecutablesView": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironmentForExecutablesView"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestGroup": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestGroup"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestGroupPermission": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestGroupPermission"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestJob": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestJob"
                        }
                    }
                }
            },
            "RestPageModelRestProjectRepository": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestProjectRepository"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestRolePermission": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestRolePermission"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestSharedCredential": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestSharedCredential"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestStage": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestStage"
                        }
                    }
                }
            },
            "RestPageModelRestUser": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestUser"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestUserAlias": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestUserAlias"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestUserDetails": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestUserDetails"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RestPageModelRestUserPermission": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "next": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "prev": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestUserPermission"
                        }
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "BuildPlan": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "example": "actions,stages,branches,variableContext",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "projectKey": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "project": {
                        "$ref": "#/components/schemas/RestProject"
                    },
                    "description": {
                        "type": "string"
                    },
                    "parentName": {
                        "type": "string"
                    },
                    "parentKey": {
                        "type": "string"
                    },
                    "parentLink": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "master": {
                        "$ref": "#/components/schemas/BuildPlan"
                    },
                    "stageName": {
                        "type": "string"
                    },
                    "planKey": {
                      "$ref": "#/components/schemas/PlanKey"
                    },
                    "planName": {
                        "type": "string",
                        "xml": {
                            "name": "name",
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "key": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "shortName": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "shortKey": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "enabled": {
                        "type": "boolean",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "BuildPlanKey": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "averageBuildTimeInSeconds": {
                        "type": "number",
                        "format": "double"
                    },
                    "actions": {
                        "$ref": "#/components/schemas/BuildPlanActionList"
                    },
                    "stages": {
                        "$ref": "#/components/schemas/RestStageList"
                    },
                    "branches": {
                        "$ref": "#/components/schemas/BuildPlanBranchList"
                    },
                    "variableContext": {
                        "$ref": "#/components/schemas/BuildVariableDefinitionContextList"
                    },
                    "isFavourite": {
                        "type": "boolean"
                    },
                    "currentRestUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "isBuilding": {
                        "type": "boolean"
                    },
                    "isActive": {
                        "type": "boolean"
                    }
                }
            },
            "BuildPlanAction": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "BuildPlanActionList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildPlanAction"
                    },
                    "action": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanAction"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanAction"
                        }
                    }
                }
            },
            "BuildPlanBranch": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "example": "latestResult,master",
                        "xml": {
                           "attribute": true
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "shortKey": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "isFavourite": {
                        "type": "boolean"
                    },
                    "latestResult": {
                         "$ref": "#/components/schemas/RestLatestResult"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "master": {
                         "type": "object"
                    },
                    "workflowType": {
                        "type": "string"
                    },
                    "divergent": {
                        "type": "boolean"
                    },
                    "awaitingSpecsExecution": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string",
                        "xml": {
                            "name": "key",
                            "attribute": true
                        }
                    },
                    "name": {
                        "type": "string",
                        "xml": {
                            "name": "name",
                            "attribute": true
                        }
                    }
                }
            },
            "BuildPlanBranchList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildPlanBranch"
                    },
                    "branch": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanBranch"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanBranch"
                        }
                    }
                }
            },
            "BuildPlanConfigList": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "mex-result": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "plan": {
                        "type": "array",
                        "items": {
                           "$ref": "#/components/schemas/BuildPlanConfig"
                        }
                    }
                }
            },
            "BuildPlanConfig": {
                "properties": {
                    "master": {
                      "$ref": "#/components/schemas/BuildPlanConfig"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "shortKey": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                     "planKey": {
                        "$ref": "#/components/schemas/RestKey"
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "suspended": {
                        "type": "boolean"
                    },
                    "stages": {
                        "$ref": "#/components/schemas/RestPageModelRestStage"
                    },
                    "project": {
                        "$ref": "#/components/schemas/RestProject"
                    }
                }
            },
            "BuildPlanIdentifier": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "project": {
                        "$ref": "#/components/schemas/RestProjectIdentifier"
                    },
                    "planType": {
                        "type": "string"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "buildKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "buildName": {
                        "type": "string"
                    },
                    "suspendedFromBuilding": {
                        "type": "boolean"
                    },
                    "masterId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BuildPlanLabel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "xml": {
                    "name": "label"
                }
            },
            "BuildPlanLabelList": {
                "type": "object",
                "properties": {
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanLabel"
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildPlanLabel"
                    },
                    "label": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanLabel"
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    }
                }
            },
            "BuildPlanLabels": {
                "type": "object",
                "properties": {
                    "labels": {
                        "$ref": "#/components/schemas/BuildPlanLabelList"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    }
                },
                "xml": {
                    "name": "labels"
                }
            },
            "BuildPlanResultTop": {
                 "properties": {
                    "results": {
                         "$ref": "#/components/schemas/BuildPlanResult"
                    }
                }
            },
            "BuildPlanResult": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResult"
                        }
                    }
                }
            },
            "RestLatestResult": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "plan": {
                        "$ref": "#/components/schemas/BuildPlan"
                    },
                    "master": {
                        "$ref": "#/components/schemas/BuildPlan"
                    },
                    "buildResultKey": {
                        "type": "string"
                    },
                    "lifeCycleState": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "specsResult": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "state": {
                        "type": "string"
                    },
                    "buildState": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "buldNumber": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "BuildPlanList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildPlan"
                    },
                    "plan": {
                        "type": "array",
                        "xml": {
                            "name": "plan"
                        },
                        "items": {
                            "$ref": "#/components/schemas/BuildPlan"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlan"
                        }
                    }
                }
            },
            "BuildPlanSpec": {
            },
            "BuildPlans": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "example": "plans",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "plans": {
                        "$ref": "#/components/schemas/BuildPlanList"
                    }
                }
            },
            "RestProgress": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "percentageCompleted": {
                        "type": "number",
                        "format": "double"
                    },
                    "percentageCompletedPretty": {
                        "type": "string"
                    },
                    "prettyTimeRemaining": {
                        "type": "string"
                    },
                    "prettyTimeRemainingLong": {
                        "type": "string"
                    },
                    "averageBuildDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "prettyAverageBuildDuration": {
                        "type": "string"
                    },
                    "buildTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "prettyBuildTime": {
                        "type": "string"
                    },
                    "startedTime": {
                        "type": "string"
                    },
                    "startedTimeFormatted": {
                        "type": "string"
                    },
                    "prettyStartedTime": {
                        "type": "string"
                    },
                    "valid": {
                        "type": "boolean"
                    },
                    "underAverageTime": {
                        "type": "boolean"
                    }
                }
            },
            "RestProject": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "My first project"
                    },
                    "key": {
                        "type": "string",
                        "example": "PROJ"
                    },
                    "description": {
                        "type": "string"
                    },
                    "publicAccess": {
                        "type": "boolean"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "RestProjectIdentifier": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "RestProjectList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestProject"
                    },
                    "project": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestProject"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestProject"
                        }
                    }
                }
            },
            "RestProjectRepository": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "admin": {
                        "type": "boolean"
                    }
                }
            },
            "RestProjects": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "projects": {
                        "$ref": "#/components/schemas/RestProjectList"
                    }
                }
            },
            "RestQuarantineConfig": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "quarantineTestsEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "RestQuarantineExpiry": {
                "type": "object",
                "properties": {
                    "expiryDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "expiryPeriod": {
                        "type": "string"
                    }
                }
            },
            "RestQueuedBuild": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "planKey": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "buildResultKey": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "triggerReason": {
                        "type": "string"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/BuildChanges"
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "changesets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepositoryChangeset"
                        }
                    }
                }
            },
            "RestQueuedBuildList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestQueuedBuild"
                    },
                    "queuedBuild": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RestQueuedBuild"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestQueuedBuild"
                        }
                    }
                }
            },
            "RestQueuedBuilds": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "queuedBuilds": {
                        "$ref": "#/components/schemas/RestQueuedBuildList"
                    }
                }
            },
            "RestQueuedDeployment": {
                "properties": {
                    "deploymentResultId": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestQueuedDeploymentList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestQueuedDeployment"
                    },
                    "queuedDeployments": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/RestQueuedDeployment"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestQueuedDeployment"
                        }
                    }
                }
            },
            "RestQueuedDeployments": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "queuedDeployments": {
                        "$ref": "#/components/schemas/RestQueuedDeploymentList"
                    }
                }
            },
            "RestQuickFilter": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "example": "Integration Tests"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasRules": {
                        "type": "boolean"
                    }
                }
            },
            "RestRemoteAgentAuthentication": {
                "type": "object",
                "properties": {
                    "approved": {
                        "type": "boolean"
                    },
                    "ip": {
                        "type": "string"
                    },
                    "ipPatterns": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uuid": {
                        "type": "string"
                    }
                }
            },
            "RestRemoteAgentCapability": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "capability.key"
                    },
                    "source": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "example": "/usr/local/path"
                    }
                },
                "xml": {
                    "name": "capability"
                }
            },
            "RestRemoteAgentConfiguration": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "remoteAgentsSupported": {
                        "type": "boolean"
                    }
                }
            },
            "RestReport": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "RestReportList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestReport"
                    },
                    "reports": {
                        "type": "array",
                        "xml": {
                            "name": "report"
                        },
                        "items": {
                            "$ref": "#/components/schemas/RestReport"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestReport"
                        }
                    }
                }
            },
            "RestReports": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "reports": {
                        "$ref": "#/components/schemas/RestReportList"
                    }
                }
            },
            "RestRepository": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "rssEnabled": {
                        "type": "boolean"
                    },
                    "projectKey": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    }
                }
            },
            "RestRepositoryConnectionResult": {
                "properties": {
                    "connectionErrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestRepositoryList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestRepository"
                    },
                    "searchResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestRepository"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestRepository"
                        }
                    }
                }
            },
            "RestRepositoryMinimal": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 123
                    },
                    "name": {
                        "type": "string",
                        "example": "linked repository 1"
                    },
                    "url": {
                        "type": "string",
                        "example": "http://localhost:8085/admin/configureLinkedRepositories.action?repositoryId=123"
                    }
                }
            },
            "RestRepositoryUsageModel": {
                "properties": {
                    "plans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildPlanIdentifier"
                        }
                    },
                    "inaccessiblePlansCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalPlans": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestEnvironment"
                        }
                    },
                    "inaccessibleEnvironmentsCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalEnvironments": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestRequirement": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "key": {
                        "type": "string"
                    },
                    "matchValue": {
                        "type": "string"
                    },
                    "readonlyData": {
                        "$ref": "#/components/schemas/RequirementReadonlyData"
                    },
                    "operations": {
                        "$ref": "#/components/schemas/RequirementOperations"
                    },
                    "typeOfMatch": {
                        "type": "string",
                        "enum": [
                            "EXISTS",
                            "EQUALS",
                            "MATCHES"
                        ]
                    }
                }
            },
            "RestResource": {
                "properties": {
                    "name": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "RestResourceList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestResource"
                    },
                    "resource": {
                        "type": "array",
                        "xml": {
                            "name": "resource"
                        },
                        "items": {
                            "$ref": "#/components/schemas/RestResource"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestResource"
                        }
                    }
                }
            },
            "RestResources": {
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "resources": {
                        "$ref": "#/components/schemas/RestResourceList"
                    }
                }
            },
            "RestResultList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackResult"
                    },
                    "result": {
                        "type": "array",
                        "xml": {
                            "name": "result"
                        },
                        "items": {
                            "$ref": "#/components/schemas/RestLatestResult"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestLatestResult"
                        }
                    }
                }
            },
            "RestResultStatus": {
                "properties": {
                    "planResultKey": {
                        "type": "string",
                        "xml": {
                            "name": "key",
                            "attribute": true
                        }
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "prettyQueuedTime": {
                        "type": "string"
                    },
                    "progress": {
                        "$ref": "#/components/schemas/RestProgress"
                    }
                }
            },
            "RestResults": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/RestResultList"
                    },
                    "expand": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "RestRolePermission": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestRssSecurityConfiguration": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "executeSpecsInDocker": {
                        "type": "boolean"
                    },
                    "dockerImage": {
                        "type": "string",
                        "example": "atlassian/bamboo-specs-runner:9.0.0"
                    },
                    "mountLocalMavenDirectory": {
                        "type": "boolean"
                    },
                    "localMavenDirectory": {
                        "type": "string"
                    }
                }
            },
            "RestScheduledJob": {
                "type": "object",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "example": "Plans"
                    },
                    "name": {
                        "type": "string",
                        "example": "Plan Cleanup"
                    },
                    "nextScheduledTime": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "self": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "RestSecuritySettings": {
                "properties": {
                    "signUp": {
                        "$ref": "#/components/schemas/RestSignUp"
                    },
                    "displayContactDetailsEnabled": {
                        "type": "boolean"
                    },
                    "restrictedAdministratorRoleEnabled": {
                        "type": "boolean"
                    },
                    "soxComplianceModeEnabled": {
                        "type": "boolean"
                    },
                    "bruteForceProtection": {
                        "$ref": "#/components/schemas/RestBruteForceProtection"
                    },
                    "xsrfProtection": {
                        "$ref": "#/components/schemas/RestXsrfProtection"
                    },
                    "resolveArtifactsContentTypeByExtensionEnabled": {
                        "type": "boolean"
                    },
                    "manageAcceptedSshHostKeys": {
                        "type": "boolean"
                    },
                    "showAuthorsDetailsToUsers": {
                        "type": "boolean"
                    },
                    "unauthenticatedRemoteTriggerAllowed": {
                        "type": "boolean"
                    },
                    "agentAssignmentModificationByUsersAllowed": {
                        "type": "boolean"
                    },
                    "rssSecurityConfiguration": {
                        "$ref": "#/components/schemas/RestRssSecurityConfiguration"
                    },
                    "manualEncryptionConfiguration": {
                        "$ref": "#/components/schemas/RestManualEncryptionConfiguration"
                    }
                }
            },
            "RestServerNodesInfo": {
                "properties": {
                    "state": {
                        "type": "string",
                        "enum": [
                            "SETUP",
                            "STARTING",
                            "RUNNING",
                            "PAUSING",
                            "PREPARING_FOR_RESTART",
                            "READY_FOR_RESTART",
                            "PAUSED"
                        ]
                    },
                    "setByUser": {
                        "type": "string",
                        "example": "admin"
                    },
                    "reindexInProgress": {
                        "type": "boolean"
                    },
                    "nodeStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestNodeStatus"
                        }
                    }
                }
            },
            "RestServerStatusInfo": {
                "properties": {
                    "state": {
                        "type": "string",
                        "enum": [
                            "SETUP",
                            "STARTING",
                            "RUNNING",
                            "PAUSING",
                            "PREPARING_FOR_RESTART",
                            "READY_FOR_RESTART",
                            "PAUSED"
                        ]
                    },
                    "setByUser": {
                        "type": "string",
                        "example": "admin"
                    },
                    "reindexInProgress": {
                        "type": "boolean"
                    }
                }
            },
            "RestSharedCredential": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "myCredentials"
                    },
                    "projectKey": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "object"
                    }
                }
            },
            "RestSignUp": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "enabledCaptcha": {
                        "type": "boolean"
                    }
                }
            },
            "RestStage": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "manual": {
                        "type": "boolean"
                    },
                    "jobs": {
                        "$ref": "#/components/schemas/RestPageModelRestJob"
                    },
                    "plans": {
                        "$ref": "#/components/schemas/BuildPlanConfigList"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "final": {
                        "type": "boolean"
                    }
                }
            },
            "RestStageList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackRestStage"
                    },
                    "stage": {
                        "type": "array",
                        "xml": {
                            "name": "stage"
                        },
                        "items": {
                            "$ref": "#/components/schemas/RestStage"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestStage"
                        }
                    }
                }
            },
            "BuildStage": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/BuildResults"
                    }
                }
            },
            "BuildStages": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildStage"
                    },
                    "stage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildStage"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildStage"
                        }
                    }
                }
            },
            "RestStorageConfiguration": {
                "properties": {
                    "softLimit": {
                        "type": "integer",
                        "format": "int32",
                        "example": 20
                    },
                    "hardLimit": {
                        "type": "integer",
                        "format": "int32",
                        "example": 25
                    }
                }
            },
            "RestTrustedKey": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                    },
                    "host": {
                        "type": "string",
                        "example": "bitbucket.com"
                    },
                    "key": {
                        "type": "string",
                        "example": "trusted_key"
                    }
                }
            },
            "RestUpdateDeploymentProjectRequest": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    }
                },
                "xml": {
                    "name": "updateDeploymentProjectRequest"
                }
            },
            "RestUser": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "admin"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Administrator"
                    },
                    "email": {
                        "type": "string",
                        "example": "admin@example.com"
                    },
                    "avatarUrl": {
                        "type": "string",
                        "example": "http://www.example.com/~admin/avatar.png"
                    }
                }
            },
            "RestUserAlias": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "user1-alias@atlassian.com"
                    }
                }
            },
            "RestUserDarkFeature": {
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "my.bamboo.feature.key"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "userName": {
                        "type": "string",
                        "example": "admin"
                    }
                }
            },
            "RestUserDetails": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "admin"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Administrator"
                    },
                    "avatarUrl": {
                       "type": "string",
                        "format": "url"
                    },
                    "email": {
                        "type": "string",
                        "example": "admin@example.com"
                    },
                    "directoryName": {
                        "type": "string",
                        "example": "Jira Server"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "editable": {
                        "type": "boolean"
                    }
                }
            },
            "RestUserPasswordUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "username"
                    },
                    "password": {
                        "type": "string",
                        "example": "new-password"
                    },
                    "passwordConfirm": {
                        "type": "string",
                        "example": "new-password"
                    }
                }
            },
            "RestUserPermission": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "admin"
                    },
                    "fullName": {
                        "type": "string",
                        "example": "Administrator"
                    },
                    "email": {
                        "type": "string",
                        "example": "admin@example.com"
                    },
                    "avatarUrl": {
                        "type": "string",
                        "example": "http://www.example.com/~admin/avatar.png"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RestUserRenameRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "newUsername"
                    },
                    "oldName": {
                        "type": "string",
                        "example": "oldUsername"
                    }
                },
                "xml": {
                    "name": "user"
                }
            },
            "BuildVariable": {
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "my_variable",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "value": {
                        "type": "string",
                        "example": "variable value",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "variableType": {
                        "type": "string",
                        "example": "variable type",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "isPassword": {
                        "type": "boolean"
                    }
                }
            },
            "BuildVariableDefinitionContext": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "variableType": {
                        "type": "string"
                    },
                    "password": {
                        "type": "boolean"
                    }
                }
            },
            "BuildVariableDefinitionContextList": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "max-results": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-results",
                            "attribute": true
                        }
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "pagingCallback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildVariableDefinitionContext"
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildVariableDefinitionContext"
                    },
                    "variable": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BuildVariable"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildVariable"
                        }
                    }
                }
            },
            "BuildVariables": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "callback": {
                        "$ref": "#/components/schemas/ListWrapperCallbackBuildVariable"
                    },
                    "variable": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BuildVariable"
                        }
                    },
                    "allElements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildVariable"
                        }
                    }
                }
            },
            "RestVcsBranches": {
            },
            "RestVcsLocationBambooSpecsState": {
                "properties": {
                    "vcsLocationId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "specsExecutionDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "logFilename": {
                        "type": "string"
                    },
                    "specImportState": {
                        "type": "string",
                        "enum": [
                            "SUCCESS",
                            "ERROR"
                        ]
                    },
                    "specsNotFound": {
                        "type": "boolean"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RestVcsLocationSpecsStatus": {
                "properties": {
                    "inProgress": {
                        "type": "boolean"
                    },
                    "specsLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RestVcsLocationBambooSpecsState"
                        }
                    }
                }
            },
            "RestVerificationRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "rawValue": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "restVerificationRequest"
                }
            },
            "RestXsrfProtection": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "disableForHTTPGET": {
                        "type": "boolean"
                    }
                }
            },
            "BuildPlanResults": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/BuildResults"
                     }
                }
            },
            "BuildResults": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildResult"
                        }
                    }
                }
            },
            "BuildResult": {
                "properties": {
                    "expand": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/BuildPlan"
                    },
                    "parentLink": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "planName": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "projectName": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "stage": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "buildState": {
                        "type": "string",
                        "xml": {
                            "name": "state",
                            "attribute": true
                        }
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "number",
                            "attribute": true
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "buildStartedTime": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    },
                    "prettyBuildStartedTime": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "buildCompletedTime": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    },
                    "prettyBuildCompletedTime": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "buildDurationInSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "buildDuration": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "buildDurationDescription": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "buildRelativeTime": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "queueStartedTime": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    },
                    "prettyQueueStartedTime": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "queueTimeInSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "queueDuration": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "prettyQueueDuration": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "vcsUpdateStartedTime": {
                        "type": "string",
                        "format": "date-time",
                        "writeOnly": true
                    },
                    "prettyVcsUpdateStartedTime": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "vcsUpdateInSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "vcsUpdateDuration": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "prettyVcsUpdateDuration": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "vcsRevisionKey": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "buildTestSummary": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "successfulTestCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "failedTestCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "quarantinedTestCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "skippedTestCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "restartCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "continuable": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "onceOff": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "restartable": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "buildReason": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "hasExecutableAgents": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "artifacts": {
                        "$ref": "#/components/schemas/RestBuildArtifactList"
                    },
                    "comments": {
                        "$ref": "#/components/schemas/RestCommentList"
                    },
                    "labels": {
                        "$ref": "#/components/schemas/BuildLabels"
                    },
                    "jiraIssues": {
                        "$ref": "#/components/schemas/JiraIssues"
                    },
                    "variables": {
                        "$ref": "#/components/schemas/BuildVariables"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/BuildChanges"
                    },
                    "logFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "testResults": {
                        "$ref": "#/components/schemas/TestResultsDetails"
                    },
                    "stages": {
                        "$ref": "#/components/schemas/BuildStages"
                    },
                    "stageResult": {
                        "$ref": "#/components/schemas/ChainStageResult"
                    },
                    "buildSummary": {
                        "$ref": "#/components/schemas/ImmutableResultsSummary"
                    }
                }
            },
            "ResultsSummary": {
                "properties": {
                    "buildKey": {
                        "type": "string"
                    },
                    "buildResultKey": {
                        "type": "string"
                    },
                    "immutablePlan": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "onceOff": {
                        "type": "boolean"
                    },
                    "restartCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "customBuild": {
                        "type": "boolean"
                    },
                    "rebuild": {
                        "type": "boolean"
                    },
                    "logSize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "processingDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "buildCompletedDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildCancelledDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "timeToFix": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "triggerReason": {
                        "$ref": "#/components/schemas/TriggerReason"
                    },
                    "deltaState": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "PASSING",
                            "FAILING",
                            "BROKEN",
                            "FIXED"
                        ]
                    },
                    "testResultsSummary": {
                        "$ref": "#/components/schemas/TestResultsSummary"
                    },
                    "buildDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "queueTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildAgentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "variableContextBaselineId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "formatVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "variableContextLogsEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "substitutedVariablesEncrypted": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "markedForDeletion": {
                        "type": "boolean"
                    },
                    "planKey": {
                        "$ref": "#/components/schemas/PlanKey"
                    },
                    "planResultKey": {
                        "$ref": "#/components/schemas/PlanResultKey"
                    },
                    "repositoryChangesets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RepositoryChangeset"
                        }
                    },
                    "successful": {
                        "type": "boolean"
                    },
                    "failed": {
                        "type": "boolean"
                    },
                    "notRunYet": {
                        "type": "boolean"
                    },
                    "notBuilt": {
                        "type": "boolean"
                    },
                    "planName": {
                        "type": "string"
                    },
                    "labelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lifeCycleState": {
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Queued",
                            "InProgress",
                            "Finished",
                            "NotBuilt"
                        ]
                    },
                    "inProgress": {
                        "type": "boolean"
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsumedSubscription"
                        }
                    },
                    "planIfExists": {
                        "$ref": "#/components/schemas/ImmutablePlan"
                    },
                    "durationDescription": {
                        "type": "string"
                    },
                    "relativeBuildDate": {
                        "type": "string"
                    },
                    "reasonSummary": {
                        "type": "string"
                    },
                    "finished": {
                        "type": "boolean"
                    },
                    "testSummary": {
                        "type": "string"
                    },
                    "jiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "immutableChain": {
                        "$ref": "#/components/schemas/ImmutableChain"
                    },
                    "commits": {
                        "type": "array",
                        "properties": {
                        },
                        "items": {
                            "$ref": "#/components/schemas/Commit"
                        }
                    },
                    "queued": {
                        "type": "boolean"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "waiting": {
                        "type": "boolean"
                    },
                    "customBuildData": {
                        "type": "object"
                    },
                    "fixingJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "relatedJiraIssues": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LinkedJiraIssue"
                        }
                    },
                    "jiraIssueKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uniqueAuthors": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Author"
                        }
                    },
                    "processingDurationDescription": {
                        "type": "string"
                    },
                    "shortReasonSummary": {
                        "type": "string"
                    },
                    "relativeQueueDate": {
                        "type": "string"
                    },
                    "relativeBuildStartedDate": {
                        "type": "string"
                    },
                    "buildTime": {
                        "type": "string"
                    },
                    "artifactLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "artifactLinksThatExist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtifactLink"
                        }
                    },
                    "changesListSummary": {
                        "type": "string"
                    },
                    "substitutedVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "variableContextLogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableContextSnapshot"
                        }
                    },
                    "manuallyOverriddenVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariableSubstitution"
                        }
                    },
                    "fullPlanName": {
                        "type": "string"
                    },
                    "statDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "buildState": {
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "Successful",
                            "Failed"
                        ]
                    },
                    "buildNumber": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RunExpiryResponse": {
                "properties": {
                    "statusUrl": {
                        "type": "string"
                    }
                }
            },
            "SearchResult": {
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "entityType": {
                        "type": "string",
                        "xml": {
                            "name": "type",
                            "attribute": true
                        }
                    },
                    "entity": {
                        "$ref": "#/components/schemas/SearchResultEntity"
                    }
                }
            },
            "SearchResultEntity": {
                "properties": {
                    "id": {
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "SearchResultsList": {
                "properties": {
                    "start-index": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "start-index",
                            "attribute": true
                        }
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "name": "max-result",
                            "attribute": true
                        }
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "searchResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchResult"
                        }
                    }
                }
            },
            "SecuritySettingsLink": {
                "properties": {
                    "link": {
                        "type": "string",
                        "example": "http://{baseurl}/rest/admin/latest/security/settings"
                    }
                }
            },
            "SimpleRestArtifactHandler": {
                "properties": {
                    "self": {
                        "type": "string",
                        "readOnly": true
                    },
                    "sharedArtifactsEnabled": {
                        "type": "boolean"
                    },
                    "nonsharedArtifactsEnabled": {
                        "type": "boolean"
                    }
                }
            },
            "StageVariableContext": {
                "properties": {
                    "chainStageResult": {
                        "$ref": "#/components/schemas/ChainStageResult"
                    },
                    "variableType": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "PLAN",
                            "JOB",
                            "MANUAL",
                            "CUSTOM",
                            "SYSTEM",
                            "UNKNOWN",
                            "ENVIRONMENT",
                            "VERSION",
                            "RESULT",
                            "PROJECT"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Status": {
                "properties": {
                    "statusCode": {
                        "type": "integer",
                        "format": "int32",
                        "example": 429,
                        "xml": {
                            "name": "status-code"
                        }
                    },
                    "message": {
                        "type": "string",
                        "example": "Too many request invoked by Joe"
                    }
                }
            },
            "StrLookup": {
            },
            "StrMatcher": {
            },
            "StrSubstitutor": {
                "properties": {
                    "escapeChar": {
                        "type": "string"
                    },
                    "variableResolver": {
                        "$ref": "#/components/schemas/StrLookup"
                    },
                    "enableSubstitutionInVariables": {
                        "type": "boolean"
                    },
                    "variablePrefixMatcher": {
                        "$ref": "#/components/schemas/StrMatcher"
                    },
                    "variablePrefix": {
                        "$ref": "#/components/schemas/StrSubstitutor"
                    },
                    "variableSuffixMatcher": {
                        "$ref": "#/components/schemas/StrMatcher"
                    },
                    "variableSuffix": {
                        "$ref": "#/components/schemas/StrSubstitutor"
                    }
                }
            },
            "TaskConditionConfig": {
                "properties": {
                    "configuration": {
                        "type": "object"
                    },
                    "conditionPluginKey": {
                        "type": "string"
                    }
                }
            },
            "TaskDefinition": {
                "properties": {
                    "entityType": {
                        "type": "string",
                        "enum": [
                            "CHAIN",
                            "STAGE",
                            "JOB",
                            "REPOSITORY",
                            "CHAIN_BRANCH",
                            "JOB_BRANCH",
                            "TASK",
                            "PROJECT",
                            "ARTIFACT_DEFINITION",
                            "DEPLOYMENT_PROJECT",
                            "SHARED_CREDENTIAL"
                        ]
                    },
                    "configuration": {
                        "type": "object"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "userDescription": {
                        "type": "string"
                    },
                    "rootDirectorySelector": {
                        "$ref": "#/components/schemas/TaskRootDirectorySelector"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskConditionConfig"
                        }
                    },
                    "finalising": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pluginKey": {
                        "type": "string"
                    },
                    "oid": {
                        "$ref": "#/components/schemas/BambooEntityOid"
                    }
                }
            },
            "TaskRootDirectorySelector": {
                "properties": {
                    "taskRootDirectoryType": {
                        "type": "string",
                        "enum": [
                            "INHERITED",
                            "DEFAULT",
                            "REPOSITORY"
                        ]
                    },
                    "repositoryDefiningWorkingDirectory": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestCase": {
                "properties": {
                    "numberOfFailedRuns": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "averageDuration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "averageDurationInSeconds": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "firstRanBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastRanBuildNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quarantineStatistics": {
                        "$ref": "#/components/schemas/QuarantineStatistics"
                    },
                    "linkedJiraIssueKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "methodName": {
                        "type": "string"
                    },
                    "testClass": {
                        "$ref": "#/components/schemas/TestClass"
                    },
                    "totalTestRuns": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successPercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "numberOfSuccessRuns": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfSkippedRuns": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quarantined": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestCaseResult": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "SUCCESS",
                            "SKIPPED",
                            "FAILED"
                        ]
                    },
                    "methodName": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResultError"
                        }
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "deltaState": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "PASSING",
                            "FAILING",
                            "BROKEN",
                            "FIXED",
                            "SKIPPED"
                        ]
                    },
                    "testCase": {
                        "$ref": "#/components/schemas/TestCase"
                    },
                    "failingSince": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "prettyDuration": {
                        "type": "string"
                    },
                    "testClassResult": {
                        "$ref": "#/components/schemas/TestClassResult"
                    },
                    "quarantined": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestCaseResultError": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "testCaseResult": {
                        "$ref": "#/components/schemas/TestCaseResult"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestClass": {
                "properties": {
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "name": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "testCases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCase"
                        }
                    },
                    "testCaseCollection": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCase"
                        }
                    },
                    "masterJobId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestClassResult": {
                "properties": {
                    "duration": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "testCaseResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    },
                    "successfulTestCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "failedTestCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skippedTestCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "buildResultsSummary": {
                        "$ref": "#/components/schemas/BuildResultsSummary"
                    },
                    "testClass": {
                        "$ref": "#/components/schemas/TestClass"
                    },
                    "testCaseResultsSet": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestCaseResult"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "shortName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestResultsResult": {
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                     "expand": {
                        "type": "string",
                        "example": "testResult"
                    },
                    "testResult": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestResult"
                        }
                    },
                    "start-index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "max-results": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TestResult": {
                "properties": {
                    "testCaseId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "expand": {
                        "type": "string",
                        "example": "errors"
                    },
                    "className": {
                        "type": "string"
                    },
                    "methodName": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "durationInSeconds": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "errors": {
                        "$ref": "#/components/schemas/TestResultError"
                    }
                }
            },
            "TestResultErrorMsg": {
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            },
            "TestResultError": {
                "properties": {
                     "size": {
                         "type": "integer",
                        "format": "int32"
                    },
                    "error": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TestResultErrorMsg"
                        }
                    },
                    "start-index": {
                         "type": "integer",
                        "format": "int32"
                    },
                    "max-result": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "TestResultsSummary": {
                "properties": {
                    "failedTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "successfulTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quarantinedTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skippedTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "testSummaryDescription": {
                        "type": "string"
                    },
                    "totalTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "newFailedTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "existingFailedTestCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fixedTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ignoredTestCaseCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalTestDuration": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TriggerDefinition": {
                "properties": {
                    "configuration": {
                        "type": "object"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "userDescription": {
                        "type": "string"
                    },
                    "triggeringRepositories": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "triggerConditionsConfiguration": {
                        "type": "object"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pluginKey": {
                        "type": "string"
                    }
                }
            },
            "TriggerReason": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "nameForSentence": {
                        "type": "string"
                    }
                }
            },
            "User": {
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "UserBean": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "VariableContextSnapshot": {
                "properties": {
                    "resultSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "variableType": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "PLAN",
                            "JOB",
                            "MANUAL",
                            "CUSTOM",
                            "SYSTEM",
                            "UNKNOWN",
                            "ENVIRONMENT",
                            "VERSION",
                            "RESULT",
                            "PROJECT"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "VariableDefinition": {
                "properties": {
                    "deploymentVersionId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "environmentId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "projectId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "variableType": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "PLAN",
                            "JOB",
                            "MANUAL",
                            "CUSTOM",
                            "SYSTEM",
                            "UNKNOWN",
                            "ENVIRONMENT",
                            "VERSION",
                            "RESULT",
                            "PROJECT"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "VariableSubstitution": {
                "properties": {
                    "resultSummary": {
                        "$ref": "#/components/schemas/ResultsSummary"
                    },
                    "variableType": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "PLAN",
                            "JOB",
                            "MANUAL",
                            "CUSTOM",
                            "SYSTEM",
                            "UNKNOWN",
                            "ENVIRONMENT",
                            "VERSION",
                            "RESULT",
                            "PROJECT"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "VariableSubstitutionContext": {
                "properties": {
                    "variableType": {
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "PLAN",
                            "JOB",
                            "MANUAL",
                            "CUSTOM",
                            "SYSTEM",
                            "UNKNOWN",
                            "ENVIRONMENT",
                            "VERSION",
                            "RESULT",
                            "PROJECT"
                        ]
                    },
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                }
            },
            "VcsBambooSpecsDetectionOptions": {
                "properties": {
                    "bambooSpecsDetectionEnabled": {
                        "type": "boolean"
                    },
                    "bambooSpecsDetection": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "configuration": {
                        "type": "object"
                    }
                }
            },
            "VcsBambooSpecsSource": {
                "properties": {
                    "vcsLocationBambooSpecsState": {
                        "$ref": "#/components/schemas/VcsLocationBambooSpecsState"
                    },
                    "yamlConfiguration": {
                        "type": "boolean"
                    },
                    "sourceLocation": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "VcsBranch": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "VcsBranchDefinition": {
                "properties": {
                    "vcsBranch": {
                        "$ref": "#/components/schemas/VcsBranch"
                    },
                    "configuration": {
                        "type": "object"
                    }
                }
            },
            "VcsBranchDetectionOptions": {
                "properties": {
                    "configuration": {
                        "type": "object"
                    }
                }
            },
            "VcsChangeDetectionOptions": {
                "properties": {
                    "maxRetries": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quietPeriod": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quietPeriodEnabled": {
                        "type": "boolean"
                    },
                    "commitIsolationEnabled": {
                        "type": "boolean"
                    },
                    "changesetFilterPatternRegex": {
                        "type": "string"
                    },
                    "filterFilePatternOption": {
                        "type": "string"
                    },
                    "filterFilePatternRegex": {
                        "type": "string"
                    },
                    "configuration": {
                        "type": "object"
                    }
                }
            },
            "VcsLocationBambooSpecsState": {
                "properties": {
                    "revision": {
                        "type": "string"
                    },
                    "specsNotFound": {
                        "type": "boolean"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "vcsLocationId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "specsExecutionDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "specImportState": {
                        "type": "string",
                        "enum": [
                            "SUCCESS",
                            "ERROR"
                        ]
                    },
                    "logFilename": {
                        "type": "string"
                    }
                }
            },
            "VcsLocationDefinition": {
                "properties": {
                    "legacyRepository": {
                        "type": "boolean"
                    },
                    "legacyConfigurationXml": {
                        "type": "string"
                    },
                    "configuration": {
                        "type": "object"
                    }
                }
            },
            "VcsRepositoryViewerDefinition": {
                "properties": {
                    "legacyViewer": {
                        "type": "boolean"
                    },
                    "legacyConfigurationXml": {
                        "type": "string"
                    },
                    "configuration": {
                        "type": "object"
                    },
                    "pluginKey": {
                        "type": "string"
                    }
                }
            },
            "VersionName": {
            },
            "VersionPreview": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "name": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "planBranchName": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "differentBranchAsPreviousRelease": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "issueCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "issueUrl": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "commitCount": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "commitUrl": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "numEnvironments": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "numEnvironmentsDeployedSuccessful": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "numEnvironmentsDeployedFailed": {
                        "type": "integer",
                        "format": "int32",
                        "writeOnly": true
                    },
                    "versionStatus": {
                        "$ref": "#/components/schemas/RestDeploymentVersionStatus"
                    },
                    "rollback": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "previousVersionName": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "previousVersionId": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "lastCreatedVersionName": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "lastCreatedVersionId": {
                        "type": "integer",
                        "format": "int64",
                        "writeOnly": true
                    },
                    "differentBuildPlan": {
                        "type": "boolean",
                        "writeOnly": true
                    }
                }
            },
            "VersionVariables": {
                "properties": {
                    "incrementableVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                        }
                    },
                    "buildVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                        }
                    }
                }
            },
            "WebRepositoryViewer": {
                "properties": {
                    "supportedRepositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "shortKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                }
            },
            "WeightedDescriptor": {
                "properties": {
                    "weight": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        }
    },
    "paths": {
        "/responsibility/latest/brokenBuild/{planResultKeyOrPlanKey}/{name}": {
            "post": {
                "description": "Add a responsible user for broken build.",
                "operationId": "addResponsible",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "planResultKeyOrPlanKey",
                        "in": "path",
                        "description": "Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully added user as responsible or user is already responsible for broken build"
                    },
                    "400": {
                        "description": "Plan does not exist or user doesn't have permission to view it",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not authenticated",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove user's responsibility from broken build.",
                "operationId": "removeResponsible",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "planResultKeyOrPlanKey",
                        "in": "path",
                        "description": "Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed user as responsible or user was not responsible for broken build"
                    },
                    "400": {
                        "description": "Requested build has not failed or does not exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not authenticated",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/responsibility/latest/brokenBuild/byUser/{name}": {
            "get": {
                "description": "Get broken builds for user.",
                "operationId": "getBrokenBuildsForUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showAllResponsible",
                        "in": "query",
                        "description": "If response should include other responsible users",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of plan keys with responsible users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestBrokenPlan"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Plan does not exist or user doesn't have permission to view it",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/responsibility/latest/brokenBuild/myBrokenBuilds": {
            "get": {
                "description": "Get broken builds for logged in user.",
                "operationId": "getMyBrokenBuilds",
                "responses": {
                    "200": {
                        "description": "List of plan keys with responsible users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestBrokenPlan"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/responsibility/latest/brokenBuild/{planResultKeyOrPlanKey}": {
            "get": {
                "description": "Get responsible users for broken build result or plan.",
                "operationId": "getResponsibleForPlanResult",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "User name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "planResultKeyOrPlanKey",
                        "in": "path",
                        "description": "Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan key with responsible users",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Plan (result) key is not valid or user has no permission to view plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/triggers/latest/remote/changeDetection": {
            "post": {
                "tags": [
                    "Triggers"
                ],
                "description": "Schedule change detection",
                "operationId": "scheduleChangeDetection",
                "parameters": [
                    {
                        "name": "skipBranches",
                        "in": "query",
                        "description": "by default, the change detection will run for all branches. If this parameter is set to true, the change detection will run only for the chain",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "planKey",
                        "in": "query",
                        "description": "The chain or branch to trigger",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Plan key not specified.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "Building has been disabled.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Could not find the plan.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/security/groups": {
            "get": {
                "description": "Retrieve a list of groups in Bamboo. The list can be filtered by some attributes, e.g. name. Name is mandatory. Since name is unique, the result only contains 0 or 1 entry.",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestGroup"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If group name is empty or invalid",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a group.",
                "operationId": "createGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Group name is not valid, group already exists or group creation is not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User does not have System Admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/capability/groupedListing": {
            "get": {
                "description": "Provides a list of capabilities for a select list in the UI.  Filterable and paginable.",
                "operationId": "getAllCapabilitiesOnServer",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of capabilities",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Search term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastGroup",
                        "in": "query",
                        "description": "Last group",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of capabilities",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server capabilities",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/expiry/run": {
            "put": {
                "description": "Executes build and deployment expiry process. Will only start each process if it's not currently running.",
                "operationId": "run",
                "responses": {
                    "202": {
                        "description": "Expiration process status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RunExpiryResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/expiry/configuration": {
            "get": {
                "description": "Retrieves global build and deployment expiry configuration for this Bamboo instance.",
                "operationId": "getConfiguration",
                "responses": {
                    "200": {
                        "description": "Current expiry configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestCombinedExpiryConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update global build and deployment expiry configuration for this Bamboo instance. Partial configuration is not allowed (it will fail validation).",
                "operationId": "setConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestCombinedExpiryConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Newly saved expiry configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestCombinedExpiryConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permissions to update the elastic configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/expiry/status": {
            "get": {
                "description": "Retrieves build and deployment expiry status.",
                "operationId": "getStatus",
                "responses": {
                    "200": {
                        "description": "Status of both build and deployment expiry, containing information whether expiry is currently running and the last expiry execution date",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestCombinedExpiryStatus"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/preview/result": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "description": "Get a preview of the deployment version.",
                "operationId": "getVersionPreview",
                "parameters": [
                    {
                        "name": "previousVersionId",
                        "in": "query",
                        "description": "Previous version id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "query",
                        "description": "Deployment project id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "planKey",
                        "in": "query",
                        "description": "Plan key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "resultKey",
                        "in": "query",
                        "description": "Result key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "query",
                        "description": "Build number",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preview of the deployment version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionPreview"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/preview/version": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "description": "Get a preview of the deployment version.",
                "operationId": "getVersionPreview_1",
                "parameters": [
                    {
                        "name": "previousVersionId",
                        "in": "query",
                        "description": "Previous version id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "versionId",
                        "in": "query",
                        "description": "Deployment version id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "query",
                        "description": "Deployment project id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "versionName",
                        "in": "query",
                        "description": "Deployment version name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment version preview.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionPreview"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/preview/possibleResults": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "description": "Get possible deployment results.",
                "operationId": "getPossibleResults",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "query",
                        "description": "Deployment project id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "planKey",
                        "in": "query",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Possible results.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/preview/versionName": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "description": "Get version name.",
                "operationId": "getVersionName",
                "parameters": [
                    {
                        "name": "resultKey",
                        "in": "query",
                        "description": "Result key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "query",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionName"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/artifactHandlers/serverLocal": {
            "get": {
                "description": "Retrieve configuration of Server-Local Artifact Handler.",
                "operationId": "getBambooServerLocalArtifactHandler",
                "responses": {
                    "200": {
                        "description": "Configuration of Server-Local Artifact Handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SimpleRestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update Server-Local Artifact handler configuration.",
                "operationId": "updateServerLocalArtifactHandler",
                "requestBody": {
                    "description": "New configuration of the artifact handler",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SimpleRestArtifactHandler"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Configuration of updated Server-Local Artifact Handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/artifactHandlers/bambooRemote": {
            "get": {
                "description": "Retrieve configuration of Bamboo Remote Artifact Handler.",
                "operationId": "getBambooRemoteArtifactHandler",
                "responses": {
                    "200": {
                        "description": "Configuration of Bamboo Remote Artifact Handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SimpleRestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update Bamboo Remote Artifact Handler configuration.",
                "operationId": "updateBambooRemoteHandler",
                "requestBody": {
                    "description": "New configuration of the artifact handler",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SimpleRestArtifactHandler"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Configuration of updated Bamboo Remote artifact handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/artifactHandlers/agentLocal": {
            "get": {
                "description": "Retrieve configuration of Agent-Local Artifact Handler.",
                "operationId": "getAgentLocalArtifactHandler",
                "responses": {
                    "200": {
                        "description": "Configuration of Agent-Local Artifact Handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update Agent-Local Artifact Handler configuration.",
                "operationId": "updateAgentLocalHandler",
                "requestBody": {
                    "description": "New configuration of the artifact handler",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestArtifactHandler"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Configuration of updated Agent Local Artifact handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/artifactHandlers/s3": {
            "get": {
                "description": "Retrieve configuration of S3 Artifact Handler.",
                "operationId": "getS3ArtifactHandler",
                "responses": {
                    "200": {
                        "description": "Configuration of S3 Artifact Handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update S3 Artifact Handler configuration.",
                "operationId": "updateS3Handler",
                "requestBody": {
                    "description": "New configuration of the artifact handler",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestArtifactHandler"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Configuration of updated S3 Artifact handler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If artifact handler dark feature is not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter": {
            "get": {
                "description": "Obtain a list of quick filters defined for this Bamboo instance.",
                "operationId": "getQuickFilters",
                "parameters": [
                    {
                        "name": "configured",
                        "in": "query",
                        "description": "When set, the list will only contain filters which have or have not been properly configured. Quick filters are considered configured when they have rules set up",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of quick filters. Each entity will contain only basic configuration, excluding e.g. quick filter's rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestQuickFilter"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new quick filter with basic configuration, e.g. name or position on list. This method does not allow to configure quick filter's rules.",
                "operationId": "createQuickFilter",
                "requestBody": {
                    "description": "Quick filter",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestQuickFilter"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returned when quick filter was created successfully. Response will contain Quick Filter definition with assigned id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuickFilter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When any validation errors occur. Response will contain all error messages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have restricted or system administrator permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/{id}": {
            "get": {
                "description": "Get a single quick filter by id.",
                "operationId": "getQuickFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Quick filter id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Single quick filter data. Will contain only basic configuration, excluding e.g. quick filter's rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuickFilter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Quick filter not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update quick filter's basic configuration, e.g. name or position on list. This method does not allow to configure quick filter's rules.",
                "operationId": "updateQuickFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Quick filter id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Quick filter",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestQuickFilter"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returned when quick filter was updated successfully. Response will contain Quick Filter definition with data after update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuickFilter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When any validation errors occur or no quick filter was found with given id. Response will contain all error messages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have restricted or system administrator permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a quick filter.",
                "operationId": "deleteQuickFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Quick filter id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returned when quick filter was deleted successfully"
                    },
                    "400": {
                        "description": "Sent when quick filter was not found with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have restricted or system administrator permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/visible": {
            "get": {
                "description": "Return visible quick filters for currently logged in user.",
                "operationId": "getVisibleFilters",
                "responses": {
                    "200": {
                        "description": "List of visible quick filters for logged in user. Each entity will contain only basic configuration, excluding e.g. quick filter's rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestQuickFilter"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Saves the list of visible quick filters for currently logged in user.",
                "operationId": "setVisibleFilters",
                "requestBody": {
                    "description": "Quick filter ids",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returned without any content when the visible filters were successfully saved for current user",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Sent whenever any quick filter was not found with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/active": {
            "get": {
                "description": "Return active quick filters for currently logged in user.",
                "operationId": "getActiveFilters",
                "responses": {
                    "200": {
                        "description": "List of active quick filters for logged in user. Each entity will contain only basic configuration, excluding e.g. quick filter's rules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestQuickFilter"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/{id}/activate": {
            "put": {
                "description": "Activates a quick filter for currently logged in user.",
                "operationId": "activateFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Quick filter id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When filter with given id was successfully activated for current user",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Sent when quick filter was not found with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/{id}/deactivate": {
            "put": {
                "description": "Deactivates a quick filter for currently logged in user.",
                "operationId": "deactivateFilter",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Quick filter id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When filter with given id was successfully deactivated for current user",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Sent when quick filter was not found with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quickFilter/deactivate": {
            "put": {
                "description": "Deactivates all quick filter for currently logged in user.",
                "operationId": "deactivateAllFilters",
                "responses": {
                    "200": {
                        "description": "When all filters were successfully deactivated for current user",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/general": {
            "get": {
                "description": "Retrieve Bamboo server general configurations.",
                "operationId": "getGeneralConfiguration",
                "responses": {
                    "200": {
                        "description": "Bamboo general configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGeneralConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user lacks restricted admin permission to view general configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update bamboo server general configurations. Partially update supported.",
                "operationId": "updateGeneralConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestGeneralConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Update successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildConcurrency"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error messages about invalid parameters. E.g. gravatar support enabled but no gravatar server url specified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user lacks restricted admin permission to update general configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/darkFeatures/{key}/user/{userName}": {
            "get": {
                "description": "Retrieves whether a given dark feature key is enabled for a given user. A dark feature is enabled for a user if its either enabled for this instance or for the specific user.",
                "operationId": "getForUser",
                "parameters": [
                    {
                        "name": "userName",
                        "in": "path",
                        "description": "the user for which the status of the dark feature needs to be checked for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the dark feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of the dark feature for the given user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestUserDarkFeature"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the user was not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Enable or disable a dark feature for a given user.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "userName",
                        "in": "path",
                        "description": "the username of the user for which the dark feature has to be enabled/disabled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the dark feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestDarkFeature"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated dark feature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestUserDarkFeature"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks permissions to update dark features for the given user",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the user was not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/darkFeatures/{key}": {
            "get": {
                "description": "Retrieves whether a given dark feature key is enabled for this instance.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the dark feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of the dark feature for this instance",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDarkFeature"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Enable or disable a dark feature for all users of this instance.",
                "operationId": "put_1",
                "parameters": [
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the dark feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestDarkFeature"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated dark feature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDarkFeature"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks permissions to update dark features for all users",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/darkFeatures": {
            "get": {
                "description": "Retrieves a list of dark features that are enabled for all users.",
                "operationId": "getAll",
                "responses": {
                    "200": {
                        "description": "A list of dark features that are enabled for all users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestDarkFeature"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/rssrepository/search": {
            "get": {
                "description": "Search for existing linked repositories which can be granted to use given repository by RSS.",
                "operationId": "searchAvailableRepositories_2",
                "parameters": [
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Part of repository name. Used to filter output",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Target repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page container with linked repositories which are RSS compatible",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryList"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has insufficient permissions to target repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified repository not found or repository stored Bamboo specs feature is disabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/scan/status": {
            "get": {
                "description": "Resource providing status of RSS processing for a given repository and optional branch.",
                "operationId": "getSpecsDetectionStatus",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum number of spec status entries returned in the response",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "id of the linked repository which stores Bamboo Specs",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "query",
                        "description": "Optional branch of the repository. Works only if repository supports divergent branches",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The object representing RSS status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestVcsLocationSpecsStatus"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has insufficient permissions to repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When Bamboo Specs feature is disabled in Bamboo, or when a repository with given ID could not be found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/scanNow": {
            "post": {
                "description": "Resource for triggering Repository-stored Bamboo Specs in a 'forced' way. Successful requests to this resource will trigger Bamboo Specs execution even if standard processing would have been skipped (e.g. no new commits to process).",
                "operationId": "triggerSpecsScanning",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "id of the repository to trigger",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "branch",
                        "in": "query",
                        "description": "Optional branch of the repository. Works only if repository supports divergent branches",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "On a valid request, when Specs scanning has been successfully enqueued"
                    },
                    "400": {
                        "description": "Whenever Specs scanning could not be enqueued, e.g. when the Repository Stored Specs processing has not been enabled for the given repository",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When Bamboo Specs feature is disabled in Bamboo, or when the repository can't be found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/scan": {
            "post": {
                "description": "Webhook resource for triggering Repository-stored Bamboo Specs. Either repository ID or name must be provided via query parameters to identify the linked repository in which Bamboo Specs are defined.\n\nAmbiguous requests, which reference more than one repository via the query params, will result in one parameter taking precedence over the others. There's no guarantee which one.\n\nThis resource does not require authorisation. It will always return HTTP 204 response on every valid request, even if the targeted repository doesn't exist or does not contain Bamboo Specs.",
                "operationId": "triggerSpecsScanning_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Unique name of the linked repository which stores Bamboo Specs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "query",
                        "description": "alternative name of the query parameter to provide repository ID",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the linked repository which stores Bamboo Specs",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "repositoryName",
                        "in": "query",
                        "description": "Alternative name of the query parameter to provide repository name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "On any valid request"
                    },
                    "400": {
                        "description": "When neither repository ID nor repository name were provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When Bamboo Specs feature is disabled in Bamboo",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/usage": {
            "get": {
                "description": "Search for usages of given repository.",
                "operationId": "findUsage",
                "parameters": [
                    {
                        "name": "max-plans",
                        "in": "query",
                        "description": "Maximum count of detailed plans at response",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "max-environments",
                        "in": "query",
                        "description": "Maximum count of detailed environments at response",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plans and environments which use this repository",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryUsageModel"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permissions to view repository or project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Repository or project not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/testConnection": {
            "put": {
                "description": "Tests connection to a repository if the repository type supports connection testing. Request payload should contain repository configuration.",
                "operationId": "testConnection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful call (without validation errors) will result in HTTP 200. The response will contain potential connection errors. If the connection to repository was successful, the error list will be empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryConnectionResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors before attempting to connect to repository. The response will contain error messages and field errors. This response will also be sent if the repository type doesn't support connection testing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The calling user had insufficient permissions, e.g. for a plan or a repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/enableCi": {
            "put": {
                "description": "Enables or disables detection of Bamboo Specs stored in the repository. If enabled, code changes detected in Bamboo Specs in new commits will trigger execution of Bamboo Specs and thus an update of corresponding entities (such as build plans, deployments or permissions).",
                "operationId": "enableCi",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Enable request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestEnableContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully enabled/disabled detection of Bamboo Specs stored in the repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "This repository does not support this feature or input data is incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The calling user has insufficient permissions to change this setting",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/enableAllProjectsAccess": {
            "put": {
                "description": "Enables access (i.e. allowing modifications) for all Bamboo projects by the Bamboo Specs code stored in this repository. Changes in Bamboo Specs detected will trigger execution of Specs and thus an update of corresponding entities (such as build plans or deployments).",
                "operationId": "enableAllProjectsAccess",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Enable request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestEnableContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully enabled/disabled access of Bamboo Specs stored in the repository to all projects",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "This repository does not handle 'enableAllProjectsAccess' feature or input data is incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The calling user has insufficient permissions to change this setting",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/enableAllRepositoriesAccess": {
            "put": {
                "description": "Enables access (i.e. allowing modifications) for all Bamboo linked repositories by the Bamboo Specs code stored in this repository.",
                "operationId": "enableAllRepositoriesAccess",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Enable request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestEnableContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully enabled/disabled access of Bamboo Specs stored in the repository to all linked repositories",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "This repository does not handle 'enableAllRepositoriesAccess' feature or input data is incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The calling user has insufficient permissions to change this setting",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/enableProjectCreation": {
            "put": {
                "description": "Enables build and deployment project creation by the Bamboo Specs code stored in this repository.",
                "operationId": "enableProjectCreation",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Enable request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestEnableContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully enabled/disabled ability of Bamboo Specs stored in the repository to create projects and deployment projects",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "This repository does not handle 'enableProjectCreation' feature or input data is incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The calling user has insufficient permissions to change this setting",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/rssrepository": {
            "get": {
                "description": "Fetch list of RSS repositories which can use given repository by RSS code.",
                "operationId": "getRssRepositoriesAllowedToAccessRepository",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Target repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "array of repositories granted to use given repository by Repository stored Bamboo Specs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestRepository"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has insufficient permissions to target repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified repository not found or repository stored Bamboo specs feature is disabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Grant repository with RSS code to use target repository in build plans and deployments. If permission is not granted RSS import will fail when code tries to use target repository.",
                "operationId": "grantRssRepositoryAccess",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Id container",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestIdContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Repository which was granted permission to",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryMinimal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When repository id is empty or null",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has insufficient permissions to target repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified repository not found by id or repository stored Bamboo specs feature is disabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{targetRepositoryId}/rssrepository/{repositoryId}": {
            "delete": {
                "description": "Revoke access of RSS code stored in repository defined by repositoryId from repository defined by targetRepositoryId. Use this method when need to prevent usage of target repository by RSS code stored in repository referenced by repositoryId.",
                "operationId": "revokePermissionToUseRepositoryByRssRepo",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Linked repository root id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "targetRepositoryId",
                        "in": "path",
                        "description": "Target repository id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When successfully removed link between target repository and repository"
                    },
                    "403": {
                        "description": "When user has insufficient permissions to repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified repository does not exist or repository stored Bamboo specs feature is disabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository": {
            "get": {
                "description": "Search for existing linked repositories by name.",
                "operationId": "findRepository",
                "parameters": [
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Target repository id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The page object with repositories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/repository/{repositoryId}/rssBranches": {
            "get": {
                "description": "Search for divergent branches names (i.e. vcs branches that have RSS execution results).",
                "operationId": "searchSpecsBranches",
                "parameters": [
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Part of branch name. Used to filter output",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "id of the linked repository which stores Bamboo Specs",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The page object with branches",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBranchList"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has insufficient permissions to repository",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When Bamboo Specs feature is disabled in Bamboo, or when a repository with given ID could not be found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/quarantine": {
            "get": {
                "description": "Retrieve Bamboo quarantine settings.",
                "operationId": "getQuarantineSettings",
                "responses": {
                    "200": {
                        "description": "Current quarantine settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuarantineConfig"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update Bamboo quarantine settings.",
                "operationId": "updateQuarantineSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestQuarantineConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Quarantine settings of Bamboo is updated successfully, return updated config",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuarantineConfig"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project permissions to a given group.",
                "operationId": "addPermissionsForGroup_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project permissions from a given group.",
                "operationId": "removePermissionsForGroup_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any project permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_4",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their project permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported",
                "operationId": "listRolePermissions_4",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project permissions to a given role.",
                "operationId": "addPermissionsForRole_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project permissions from a given role.",
                "operationId": "removePermissionsForRole_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project permissions to a given user.",
                "operationId": "addPermissionsForUser_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project permissions from a given user.",
                "operationId": "removePermissionsForUser_4",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any project permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_4",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_4",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/project/{key}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_4",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/server/prepareForRestart": {
            "put": {
                "description": "Prepare server for restarting: suspend change detection, stop indexing, stop ec2 instance ordering etc.",
                "operationId": "prepareForRestart",
                "responses": {
                    "200": {
                        "description": "Server status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestServerStatusInfo"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have ADMINISTRATION permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/server/nodes": {
            "get": {
                "description": "Get nodes status.",
                "operationId": "getNodesStatus",
                "responses": {
                    "200": {
                        "description": "Nodes status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestServerNodesInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/server/pause": {
            "post": {
                "description": "Pauses the server.",
                "operationId": "pause",
                "responses": {
                    "200": {
                        "description": "Server status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestServerStatusInfo"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have ADMINISTRATION permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/server/resume": {
            "post": {
                "description": "Resumes the server.",
                "operationId": "resume",
                "responses": {
                    "200": {
                        "description": "Server status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestServerStatusInfo"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have ADMINISTRATION permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/server": {
            "get": {
                "description": "Get server status.",
                "operationId": "getStatus_1",
                "responses": {
                    "200": {
                        "description": "Server status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestServerStatusInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/chart": {
            "get": {
                "description": "Chart url.",
                "operationId": "getImageUrl",
                "parameters": [
                    {
                        "name": "buildKeys",
                        "in": "query",
                        "description": "Plan keys",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "reportKey",
                        "in": "query",
                        "description": "Report key",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chart",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestChart"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Plans not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/chart/reports": {
            "get": {
                "description": "Fetch available reports list.",
                "operationId": "getAvailableReports",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of reports",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible values: reports",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of reports",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chart",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestReports"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/chart/planSummary": {
            "get": {
                "description": "Get plan summary.",
                "operationId": "getPlanSummary",
                "parameters": [
                    {
                        "name": "buildKeys",
                        "in": "query",
                        "description": "Single plan key",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chart",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestChart"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "More than one plan key provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/storageSettings": {
            "get": {
                "tags": [
                    "Storage configuration"
                ],
                "description": "Read storage configuration limits.",
                "operationId": "getStorageConfiguration",
                "responses": {
                    "200": {
                        "description": "The storage limits",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestStorageConfiguration"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks permissions to see storage configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If feature is not enabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Storage configuration"
                ],
                "description": "Set storage configuration limits.",
                "operationId": "saveStorageConfiguration",
                "requestBody": {
                    "description": "New storage configuration limits",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestStorageConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The storage limits",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestStorageConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request validation has failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User lacks permissions to see storage configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If feature is not enabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/clone/{projectKey}-{buildKey}:{toProjectKey}-{toBuildKey}": {
            "put": {
                "description": "Clone an existing Plan into a new one, possibly into different project.",
                "operationId": "getClone",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Source project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Source build key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toBuildKey",
                        "in": "path",
                        "description": "Destination build key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toProjectKey",
                        "in": "path",
                        "description": "Destination project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cloned plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "There is no source plan or there is no project to which clone or there is already plan with destination key or permission denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/dependency/search/{projectKey}-{buildKey}/child": {
            "get": {
                "description": "Search for available plan child dependencies",
                "operationId": "searchForAvailablePlanChildDependencies",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of plans",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Search term",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of plans",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Build key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan dependencies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDependencies"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Search term not provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/dependency/search/{projectKey}-{buildKey}/parent": {
            "get": {
                "description": "Search for available plan parent dependencies",
                "operationId": "searchForAvailablePlanParentDependencies",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of plans",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Search term",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of plans",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Build key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan parent dependencies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDependencies"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Search term not provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/security/settings": {
            "get": {
                "description": "Retrieve security settings.",
                "operationId": "getSecuritySettings",
                "responses": {
                    "200": {
                        "description": "Bamboo security settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestSecuritySettings"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system admin permissions to view security settings",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update security settings. Partial update supported.",
                "operationId": "updateRestSecuritySettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestSecuritySettings"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Link to the REST endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecuritySettingsLink"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If invalid settings are given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks system administration permissions which are needed to update",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/favourite": {
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Add plan to favourite.",
                "operationId": "markPlanFavourite",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Added plan to favourite"
                    },
                    "401": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "description": "Remove plan from favorites.",
                "operationId": "unmarkPlanFavourite",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful removal of plan from favorites"
                    },
                    "401": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/enable": {
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Enable plan.",
                "operationId": "enablePlan",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Plan successfully enabled"
                    },
                    "403": {
                        "description": "User has no permission to build specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "description": "Disable plan.",
                "operationId": "disablePlan",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Plan successfully disabled"
                    },
                    "403": {
                        "description": "User has no permission to build specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Fetch plan details.",
                "operationId": "getPlan",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible expand parameters: actions, stages, branches, variableContext.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Build key (might be planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlan"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "description": "Marks plan for deletion. Plan will be deleted by a batch job.",
                "operationId": "deletePlan",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Plan was marked for removal"
                    },
                    "403": {
                        "description": "User has no permission to build specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/variables": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Retrieve the list of all variables for a plan.",
                "operationId": "getPlanVariables",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of variables for the given plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Add a new plan variable.",
                "operationId": "addPlanVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Plan variable",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Plan variable successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A plan variable with given name already exists or name field is empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/variables/{variableName}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Retrieve the plan variable by given name.",
                "operationId": "getPlanVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A plan variable with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariable"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan or variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "description": "Update the plan variable.",
                "operationId": "editPlanVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "Variable name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Variable to be updated",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Plan variable successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Variable content is not provided or name field is empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan or variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Build"
                ],
                "description": "Delete the plan variable.",
                "operationId": "deletePlanVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "Name of the variable to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Plan variable successfully deleted"
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan or variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/artifact": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Fetch plan's shared artifact definitions.",
                "operationId": "getPlanArtifactDefinition",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of artifacts",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of artifacts",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan artifact definitions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestArtifactDefinitions"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/test/{testId}/quarantine": {
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Quarantine plan's test.",
                "operationId": "quarantineTest",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testId",
                        "in": "path",
                        "description": "Test id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Quarantine settings",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RestQuarantineExpiry"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestQuarantineExpiry"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Test quarantined successfully"
                    },
                    "400": {
                        "description": "Test not found by id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to build specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/test/{testId}/unleash": {
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Unleash plan's test from quarantine.",
                "operationId": "unleashTest",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testId",
                        "in": "path",
                        "description": "Test id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Test unleashed successfully"
                    },
                    "400": {
                        "description": "Test not found by id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to build specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/branch/enableSpecsForBranches": {
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Enable specs scanning for all branches.",
                "operationId": "enableSpecsForBranches",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Bamboo Specs scan enabled for all branches"
                    },
                    "403": {
                        "description": "User has no permission to administrate specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}/{buildKey}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Fetch plan details.",
                "operationId": "getPlanAlias",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible expand parameters: actions, stages, branches, variableContext.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Build key (might be planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlan"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/branch": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Fetch list of branches for specified plan.",
                "operationId": "getPlanBranches",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabledOnly",
                        "in": "query",
                        "description": "Show enabled branches only",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloverEnabled",
                        "in": "query",
                        "description": "Show branches with Clover integration enabled",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "my",
                        "in": "query",
                        "description": "Show branches where current user is creator",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Show favourite branches only",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of branches in the VCS of the plan's default repository",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBranches"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/branch/{branchName}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Provide details for specified branch of a specified plan.",
                "operationId": "getPlanBranch",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branchName",
                        "in": "path",
                        "description": "Branch display name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of specified branch of the plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlanBranch"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan or branch does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "description": "Create branch for a plan. You can use **vcsBranch** query param to define which vcsBranch should newly created branch use. If not specified it will not override vcsBranch from the plan.",
                "operationId": "createNewBranch",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cleanupEnabled",
                        "in": "query",
                        "description": "If plan branch expiry settings should be enabled",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vcsBranch",
                        "in": "query",
                        "description": "Name of the VCS branch",
                        "schema": {
                            "type": "string"
                        },
                        "example": "/refs/heads/myBranch"
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branchName",
                        "in": "path",
                        "description": "New branch name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "If plan branch should be enabled",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly created branch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlanBranch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "There have been validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/specs": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Export plan as Bamboo Specs code.",
                "operationId": "exportPlanSpec",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package",
                        "in": "query",
                        "description": "A package name for the exported spec",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "a format of code. It's 'java' by default.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "JAVA",
                                "YAML"
                            ]
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bamboo Specs code for plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlanSpec"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unknown export format or code generator error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view configuration of specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "List all plans that user has READ permission for and allowed to see.\n\nPossible expand parameters:\n\n- <tt>plans</tt> - list of plans\n\n- <tt>plans.plan</tt> - list of plans with plan details\n\n- <tt>plans.plan.actions</tt> - list of plans with actions details",
                "operationId": "getAllPlanList",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible expand parameters: plans.",
                        "schema": {
                            "type": "string"
                        }
                    },
                     {
                        "name": "start-index",
                        "in": "query",
                        "description": "start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                     {
                        "name": "max-results",
                        "in": "query",
                        "description": "maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildPlans"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/label": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "List of labels for plan.",
                "operationId": "getPlanLabels",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of labels for plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildLabels"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Build"
                ],
                "description": "Add new label to plan.",
                "operationId": "addPlanLabel",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "label content to add to build result",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildPlanLabel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildPlanLabel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "On success"
                    },
                    "400": {
                        "description": "Label contains invalid characters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to modify specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/label/{labelName}": {
            "delete": {
                "tags": [
                    "Build"
                ],
                "description": "Remove label from plan.",
                "operationId": "removePlanLabel",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "labelName",
                        "in": "path",
                        "description": "Label name to remove from plan",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "On success"
                    },
                    "400": {
                        "description": "Label contains invalid characters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to modify specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan or label does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/vcsBranches": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "List of vcs branch names for branches that exist on the default repository of this plan.",
                "operationId": "getVcsBranches",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of branches",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Search term based on which the branch names will be filtered out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of branches",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key - only top level plans are supported",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of branches in the vcs of the default repository for the given plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestVcsBranches"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors: branch or job key provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/{projectKey}-{buildKey}/issue/{issueKey}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Fetch linked Jira issue details.",
                "operationId": "getIssueDetails",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "path",
                        "description": "Jira issue key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Jira issue details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestJiraIssue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unknown issue key or wrong Applink configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified project or plan does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/info": {
            "get": {
                "description": "Bamboo instance details.",
                "operationId": "getInfo",
                "responses": {
                    "200": {
                        "description": "Instance details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/security/trustedKey/{id}": {
            "delete": {
                "tags": [
                    "Trusted keys management"
                ],
                "description": "Delete trusted key.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the trusted key to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Trusted key has been successfully deleted"
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Trusted keys feature is disabled.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/security/trustedKey": {
            "get": {
                "tags": [
                    "Trusted keys management"
                ],
                "description": "Get all trusted keys.",
                "operationId": "findAll",
                "responses": {
                    "200": {
                        "description": "A list of trusted keys.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestTrustedKey"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Trusted keys feature is disabled.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Trusted keys management"
                ],
                "description": "Create new trusted key.",
                "operationId": "create",
                "requestBody": {
                    "description": "Trusted key to add",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestTrustedKey"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Trusted key has been successfully added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestTrustedKey"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Trusted keys feature is disabled.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/encrypt": {
            "post": {
                "description": "Encrypts a given text based on the instance specific cipher. Encrypted data can be used i.a. in Repository-stored Specs. Feature can be enabled or disabled in Bamboo security configuration. Number of allowed requests per user is limited and can be modified in Bamboo security configuration.",
                "operationId": "encrypt",
                "requestBody": {
                    "description": "The request containing the details of manual encryption",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ManualEncryptionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Encrypted text",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManualEncryptionResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "A response with code HTTP 404 indicates that feature is disabled in Bamboo",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "429": {
                        "description": "A response with code HTTP 429 indicates that this resource had been called to many times by the authenticated user. Retry-After header contains information about how long (in seconds) the user has to wait till next call will be allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/globalVariables": {
            "get": {
                "description": "Return collection of all global variables. Value of variables that contain password in name will be encrypted with salted hash.",
                "operationId": "getGlobalVariables",
                "responses": {
                    "200": {
                        "description": "Collection of all global variables",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGlobalVariables"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a single global variable.",
                "operationId": "createGlobalVariable",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestGlobalVariable"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Global variable that is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGlobalVariable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If contains invalid input, e.g. illegal variable name, variable already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to create global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/globalVariables/{variableId}": {
            "get": {
                "description": "Retrieve a global variable definition. Value will be encrypted if variable name contains key word password.",
                "operationId": "getGlobalVariable",
                "parameters": [
                    {
                        "name": "variableId",
                        "in": "path",
                        "description": "Id of the variable",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " Variable definition which contains name, value and link to the variable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGlobalVariable"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update value of a global variable.",
                "operationId": "updateGlobalVariable",
                "parameters": [
                    {
                        "name": "variableId",
                        "in": "path",
                        "description": "Id of the variable",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestGlobalVariable"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": " Update variable successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestGlobalVariable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If new value is invalid, e.g. exceeds max length 4000",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to create global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the user lacks restricted admin permission to update global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a global variable.",
                "operationId": "deleteGlobalVariable",
                "parameters": [
                    {
                        "name": "variableId",
                        "in": "path",
                        "description": "Id of the variable to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Variable deleted successfully"
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to delete global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/globalVariables/verify": {
            "put": {
                "description": "Server side verification that the encrypted value of a global variable has changed.",
                "operationId": "verifyGlobalVariableValue",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestVerificationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Variable value matches provided value",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If variable name or value format is wrong",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to fetch global variables",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "409": {
                        "description": "The variable value doesn't match provided value",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/byChangeset/{csid}": {
            "get": {
                "description": "Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans related to this changeset.",
                "operationId": "getBuildResultsForChangeset",
                "parameters": [
                    {
                        "name": "csid",
                        "in": "path",
                        "description": "changeset id related to build result",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build results for specified changeset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/byCheckoutChangeset/{csid}": {
            "get": {
                "description": "Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans which have repositories checked out with this changeset.",
                "operationId": "getBuildResultsForCheckoutChangeset",
                "parameters": [
                    {
                        "name": "csid",
                        "in": "path",
                        "description": "checkout changeset id related to build result",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build results for specified changeset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result": {
            "get": {
                "description": "Provide list of the latest build results for top level plans visible for users.",
                "operationId": "getLatestBuildResults",
                "parameters": [
                    {
                        "name": "includeAllStates",
                        "in": "query",
                        "description": "return build results in all lifecycle states, including unknown and active states",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "continuable",
                        "in": "query",
                        "description": "filter only results that may be continued (stopped on Manual Stage)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "query",
                        "description": "Filter by comma separated list of Jira issue key related to result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max-results",
                        "in": "query",
                        "description": "maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Filter by comma separated list of labels",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildstate",
                        "in": "query",
                        "description": "filter results by state, valid values are Unknown, Successful, Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Filters build results list to show only results for favourite plans. Works only for authenticated user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lifeCycleState",
                        "in": "query",
                        "description": "return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest build results for all plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestResults"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}": {
            "get": {
                "description": "Provide list of latest build results for top level plans for specified project. List of results is limited to plans visible for user.",
                "operationId": "getLatestBuildResultsForProject",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible values: changes,metadata,plan,master,vcsRevisions,artifacts,comments,labels,jiraIssues,variables,stages",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeAllStates",
                        "in": "query",
                        "description": "return build results in all lifecycle states, including unknown and active states",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "continuable",
                        "in": "query",
                        "description": "filter only results that may be continued (stopped on Manual Stage)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key to filter plan result list",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "query",
                        "description": "Filter by comma separated list of Jira issue key related to result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max-results",
                        "in": "query",
                        "description": "Maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Filter by comma separated list of labels",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildstate",
                        "in": "query",
                        "description": "filter results by state, valid values are Unknown, Successful, Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Filters build results list to show only results for favourite plans. Works only for authenticated user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lifeCycleState",
                        "in": "query",
                        "description": "return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest build results for plans for specified project",
                        "content": {
                            "application/json": {
                                "schema": {
                                     "$ref": "#/components/schemas/BuildPlanResults"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exists or user does not have permission to see plans for specified project",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}/latest": {
            "get": {
                "description": "Provide latest build results for top level plans for specified project. List of results is limited to plans visible for user.",
                "operationId": "getLatestBuildResultForProject",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible values: changes,metadata,plan,master,vcsRevisions,artifacts,comments,labels,jiraIssues,variables,stages",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeAllStates",
                        "in": "query",
                        "description": "return build results in all lifecycle states, including unknown and active states",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "continuable",
                        "in": "query",
                        "description": "filter only results that may be continued (stopped on Manual Stage)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key to filter plan result list",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "query",
                        "description": "Filter by comma separated list of Jira issue key related to result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max-results",
                        "in": "query",
                        "description": "Maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Filter by comma separated list of labels",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildstate",
                        "in": "query",
                        "description": "filter results by state, valid values are Unknown, Successful, Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Filters build results list to show only results for favourite plans. Works only for authenticated user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lifeCycleState",
                        "in": "query",
                        "description": "return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest build results for plans for specified project",
                        "content": {
                            "application/json": {
                                "schema": {
                                     "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exists or user does not have permission to see plans for specified project",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}": {
            "get": {
                "description": "Provide list of build results for specified plan. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).",
                "operationId": "getBuildHistory",
                "parameters": [
                    {
                        "name": "includeAllStates",
                        "in": "query",
                        "description": "return build results in all lifecycle states, including unknown and active states",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "continuable",
                        "in": "query",
                        "description": "filter only results that may be continued (stopped on Manual Stage)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "query",
                        "description": "Filter by comma separated list of Jira issue key related to result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max-results",
                        "in": "query",
                        "description": "Maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Filter by comma separated list of labels",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildstate",
                        "in": "query",
                        "description": "filter results by state, valid values are Unknown, Successful, Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Filters build results list to show only results for favourite plans. Works only for authenticated user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lifeCycleState",
                        "in": "query",
                        "description": "return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest build results for specified plan. Results are ordered from latest or oldest",
                        "content": {
                            "application/json": {
                                "schema": {
                                   "$ref": "#/components/schemas/BuildResults"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan does not exists",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}/branch/{branchName}": {
            "get": {
                "description": "Provide list of build results for specified plan's branch. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).",
                "operationId": "getBranchHistory",
                "parameters": [
                    {
                        "name": "includeAllStates",
                        "in": "query",
                        "description": "return build results in all lifecycle states, including unknown and active states",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "continuable",
                        "in": "query",
                        "description": "filter only results that may be continued (stopped on Manual Stage)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "issueKey",
                        "in": "query",
                        "description": "Filter by comma separated list of Jira issue key related to result",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "max-results",
                        "in": "query",
                        "description": "Maximum size for returned list",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index for results list (zero based)",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branchName",
                        "in": "path",
                        "description": "Branch name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "label",
                        "in": "query",
                        "description": "Filter by comma separated list of labels",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildstate",
                        "in": "query",
                        "description": "filter results by state, valid values are Unknown, Successful, Failed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "favourite",
                        "in": "query",
                        "description": "Filters build results list to show only results for favourite plans. Works only for authenticated user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lifeCycleState",
                        "in": "query",
                        "description": "return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest build results for specified plan. Results are ordered from latest or oldest",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan or branch does not exists",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}/{buildNumber}": {
            "get": {
                "description": "Provide build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "getBuildAlias",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as *latest* for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result of single build. Presented content contain information for finished build. If build is in progress, contains additional runtime information. Top level plan contains additionally progress information, job progress information, current log entries and hasExecutableAgent boolean flag.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan or build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}": {
            "get": {
                "description": "Provide build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "getBuild",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildPositions",
                        "in": "query",
                        "description": "in case of PENDING or QUEUED state expands build result queue position",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as *latest* for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result of single build. Presented content contain information for finished build. If build is in progress, contains additional runtime information. Top level plan contains additionally progress information, job progress information, current log entries and hasExecutableAgent boolean flag.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildResult"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan or build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/comment": {
            "get": {
                "description": "Provide list of comments for build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "getBuildComments",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as *latest* for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments for build result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestComments"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan or build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Adds new comment to build result.",
                "operationId": "addBuildComment",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Build result comment",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentRequest"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Comment added"
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or plan or build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/comment/{commentId}": {
            "delete": {
                "description": "Removes a comment from a build result.",
                "operationId": "removeBuildComment",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (might be simply planKey or composite planKey-jobKey)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "id of the comment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted"
                    },
                    "403": {
                        "description": "When user has no permission to delete the specified comment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project, plan, build result or comment does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/label": {
            "get": {
                "description": "Provide list of labels for build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "getBuildLabels",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (must be a plan key, not a job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as \"latest\" for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments for build result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildLabels"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project, plan, build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Adds new label to build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "addBuildLabel",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (must be a plan key, not a job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as *latest* for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Build result label",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RestBuildLabel"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestBuildLabel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "On success"
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project, plan, build result does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/label/{labelName}": {
            "delete": {
                "description": "Removes label from build result specified by projectKey-buildKey-buildNumber.",
                "operationId": "removeBuildLabel",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (must be a plan key, not a job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "labelName",
                        "in": "path",
                        "description": "Label name to remove from build result",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number may be specified as *latest* for the result with the highest build number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "On success"
                    },
                    "403": {
                        "description": "When user has no permission to edit specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project, plan, build result or label does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/result/status/{projectKey}-{buildKey}-{buildNumber}": {
            "get": {
                "description": "Provide runtime information for currently executing build result. The key difference to other methods is that method is optimized to provide information available in memory only, so no database calls are made. The information provided is not as wide as for finished results, but the call is optimized for speed.",
                "operationId": "getResultStatus",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (must be a plan key, not a job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number (numeric value only, 'latest' keyword is not supported for this method)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currently executing build status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestResultStatus"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to view specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project, plan or build result does not exists. Also when build result is not currently executed ie. build has been completed already",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/dashboard/{projectId}": {
            "get": {
                "description": "Get deployment project environments with deployment status. It's not optimized for instances with large count of deployment projects and environments, use paged versions instead.",
                "operationId": "getDeploymentProject",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment project with environments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DashboardProjectWithEnvironmentStatus"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/api/latest/deploy/dashboard/paginate": {
            "get": {
                "description": "Get paginated deployment projects with environments list.",
                "operationId": "getDeploymentProjects",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Deployment project id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "maximum": 500,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paged response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestDeploymentProject"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/dashboard": {
            "get": {
                "description": "Get all deployment projects. This method fetch all deployment projects visible to user. It's not optimized for instances with large count of deployment projects and environments, use paged versions instead.",
                "operationId": "getAllDeploymentProjects",
                "responses": {
                    "200": {
                        "description": "Deployment projects with environments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DashboardProjectWithEnvironmentStatus"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/api/latest/deploy/dashboard/status": {
            "post": {
                "description": "Get environment latest release info.",
                "operationId": "getEnvironmentStatutes",
                "requestBody": {
                    "description": "identifiers of environments",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentIds"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Environments latest deployment results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestEnvironmentStatusForDashboard"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to provided environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/dashboard/paginate/{projectId}": {
            "get": {
                "description": "Get deployment project environments.",
                "operationId": "getPaginateDeploymentProject",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Environment name filter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "maximum": 500,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment project with paged environments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestDeploymentProject"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/quicksearch": {
            "get": {
                "description": "Performs a starts with search against projects, plans, plan branches, deployment projects",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "to search for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchEntity",
                        "in": "query",
                        "description": "entity to search for",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROJECT",
                                "PLAN",
                                "DEPLOYMENT",
                                "PLAN_BRANCH"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonSearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment project permissions to a given group.",
                "operationId": "addPermissionsForGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment project permissions from a given group.",
                "operationId": "removePermissionsForGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their deployment project permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.",
                "operationId": "listRolePermissions",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment project permissions to a given role.",
                "operationId": "addPermissionsForRole",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role. Anonymous role supports only VIEW permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment project permissions from a given role.",
                "operationId": "removePermissionsForRole",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment project permissions to a given user.",
                "operationId": "addPermissionsForUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment project permissions from a given user.",
                "operationId": "removePermissionsForUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their deployment project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/deployment/{id}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project plan permissions to a given group.",
                "operationId": "addPermissionsForGroup_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project plan permissions from a given group.",
                "operationId": "removePermissionsForGroup_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any project plan permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their project plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.",
                "operationId": "listRolePermissions_5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project plan permissions to a given role.",
                "operationId": "addPermissionsForRole_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "IIf permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role. Anonymous role supports only VIEW permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project plan permissions from a given role.",
                "operationId": "removePermissionsForRole_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants project plan permissions to a given user.",
                "operationId": "addPermissionsForUser_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes project plan permissions from a given user.",
                "operationId": "removePermissionsForUser_5",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any project plan permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their project plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/projectplan/{key}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Project entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/access-token": {
            "get": {
                "tags": [
                    "resource"
                ],
                "description": "Retrieve a page of user's access tokens.",
                "operationId": "getUserTokens",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of access tokens.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestAccessToken"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "resource"
                ],
                "description": "Create a new access token for the current user.",
                "operationId": "createAccessToken",
                "requestBody": {
                    "description": "request for a token - name is a required field",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccessTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "New access tokens with rawToken field value.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAccessToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Token count limit exceeded, token with same name already exists, general error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/access-token/{tokenId}": {
            "delete": {
                "tags": [
                    "resource"
                ],
                "description": "Revoke current user's access token.",
                "operationId": "revokeToken",
                "parameters": [
                    {
                        "name": "tokenId",
                        "in": "path",
                        "description": "id of the token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When token has been successfully revoked."
                    },
                    "400": {
                        "description": "User doesn't own provided token. The response will hold additional information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/": {
            "get": {
                "description": "Provides list of available REST resources in Bamboo",
                "operationId": "getAllServices",
                "responses": {
                    "200": {
                        "description": "List of available REST resources",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestResources"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/queue": {
            "get": {
                "description": "Provide list of build scheduled for execution and waiting in build queue.",
                "operationId": "getBuildQueue_1",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of builds",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of builds",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of queued builds waiting in the build queue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQueuedBuilds"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/queue/{projectKey}-{buildKey}-{buildNumber}": {
            "put": {
                "description": "Continue partially done build.\n\nEffectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately.\nDepending on currently executed builds and length of build queue, build may be executed when queue would be drained.\nAdditional variables could be passed to this method only query parameters (variableName=variableValue).\nVariables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. bamboo.variable.myVariable=valueForMyVariable.\nWhen global or plan variables would be passed to this method, will override values valid for previous build execution (override).",
                "operationId": "continueBuild",
                "parameters": [
                    {
                        "name": "executeAllStages",
                        "in": "query",
                        "description": "enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stage",
                        "in": "query",
                        "description": "name of the stage that should be executed even if manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key  (only top level plan key, can not be job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "build number to resume/rerun",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information for queued build, including build number, changes and reason of build",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQueuedBuild"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When build is currently executing or is in state not allowing execution",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have sufficient rights to view or execute build for specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified plan does not exist, result for provided build number does not exist or is not top level plan result",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Stop build execution.",
                "operationId": "stopBuild",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "Project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "Plan key - IMPORTANT: as build queue contains only jobs not top level plans, plan key here MUST be a job key as opposite to other methods in this resource.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildNumber",
                        "in": "path",
                        "description": "Build number",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "On success (success is also when build was already completed - so nothing to stop)"
                    },
                    "403": {
                        "description": "When user does not have sufficient rights to view or execute build for specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified job does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/queue/{projectKey}-{buildKey}": {
            "post": {
                "description": "Provide list of build scheduled for execution and waiting in build queue.\n\nFire build execution for specified plan.\nEffectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately.\nDepending on currently executed builds and length of build queue, build may be executed when queue would be drained.\nAdditional variables could be passed to this method either as form encoded POST payload or query parameters. PLEASE note: Query parameters are more important - override those stored in form payload.\nVariables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. <code>bamboo.variable.myVariable=valueForMyVariable</code>.\nWhen global or plan variables would be passed to this method, will override default values for variables.",
                "operationId": "startBuild",
                "parameters": [
                    {
                        "name": "executeAllStages",
                        "in": "query",
                        "description": "enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customRevision",
                        "in": "query",
                        "description": "execute this plan for a custom revision instead of the latest one",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stage",
                        "in": "query",
                        "description": "name of the stage that should be executed even if defined as manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildKey",
                        "in": "path",
                        "description": "plan key (only top level plan key, can not be job key)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "fakeParam": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "fakeParam": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "fakeParam": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Information for queued build, including build number, changes and reason of build",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQueuedBuild"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When build was not added to the queue because of Bamboo limitation, e.g too many concurrent builds running for requested plan already or validation exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have sufficient rights to view or execute build for specified plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified plan does not exist or plan is not a top level plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "415": {
                        "description": "When method payload is not form encoded",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get a summary of a single environment.",
                "operationId": "getEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environment with the given id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestEnvironmentWithConfigCounts"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have VIEW permission for environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Environment with given id has not been found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/agent-assignment": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get a list of agents/images assigned to given environment.",
                "operationId": "findAssignedAgentsByEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of assigned agents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestAgentAssignmentExecutorDetails"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions for updating an agent assignment, which translates into no WRITE permissions to edit the configuration of the environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Core"
                ],
                "description": "Add agent assignment for environment. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey. \nagentAssignmentKey is parsed by ExecutorKey.",
                "operationId": "addAgentAssignmentForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "A map with 'name' key which reference agent assignment key as 'value'",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns new agent assignments for the given environment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgentAssignmentExecutorDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions for updating an agent assignment, which translates into no WRITE permissions to edit the configuration of the environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/agent-assignment/{executorKey}": {
            "delete": {
                "tags": [
                    "Core"
                ],
                "description": "Remove agent/image from list of dedicated executors for given environment.",
                "operationId": "removeAgentAssignmentFromEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "executorKey",
                        "in": "path",
                        "description": "key is parsed by ExecutorKey",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Agent assignment has been removed successfully."
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions for updating an agent assignment, which translates into no WRITE permissions to edit the configuration of the environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/docker": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get Docker configuration for given environment.",
                "operationId": "getDockerPipelinesConfiguration",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns Docker Pipeline configuration for given environment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDockerPipelineConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no edit permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Core"
                ],
                "description": "Save Docker configuration for given environment.",
                "operationId": "saveDockerPipelinesConfiguration",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Docker pipelines configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestDockerPipelineConfiguration"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Docker Pipeline configuration saved"
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no edit permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/move/{position}/{relativeEnvironmentId}": {
            "post": {
                "tags": [
                    "Core"
                ],
                "description": "Change environment position within deployment project.",
                "operationId": "moveEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relativeEnvironmentId",
                        "in": "path",
                        "description": "environment id which referenced environment should be placed before or after",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "position",
                        "in": "path",
                        "description": "position; possible values: AFTER or BEFORE",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Environment position has been changed."
                    },
                    "403": {
                        "description": "Returned when user has no Edit permission to deployment project or environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Returned when environment or relative environment was not found or not visible to user.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/variables": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get a list of environment variables.",
                "operationId": "getAllEnvironmentVariables",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of variables for the given environment id",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "Returned when user has no permission to administrate specified environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Returned when specified environment does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/agent/{agentId}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Provide a paginated list of minimal information about environments executable by a given agent.",
                "operationId": "getEnvironmentsExecutableByAgent",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "string the environments and deployment projects will be filtered by",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "id of an agent the environment requirements are checked against",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "maximum": 100,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated deployment project's and environment's ids and names",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestEnvironmentForExecutablesView"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Environment with given id has not been found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/elasticImageConfiguration/{configurationId}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Provide a paginated list of minimal information about environments executable by a given elastic image configuration.",
                "operationId": "getEnvironmentsExecutableByElasticConfiguration",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "String the environments and deployment projects will be filtered by",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "maximum": 100,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "Id of elastic image configuration the environment requirements are checked against",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated deployment project's and environment's ids and names",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestEnvironmentForExecutablesView"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Environment with given id has not been found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/results": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get a list of versions deployed to the environment. Sorted by started date: newest first.",
                "operationId": "getDeploymentResultList",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expands deployment versions. Possible values are: results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of deployment results.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentResultList"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user don't have VIEW permission for environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/possible-agent-assignment": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get a list of agents/images which can be dedicated for given environment.",
                "operationId": "findPossibleAgentsForEnvironment",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of environments",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Part of the agent or image name to filter response. Use empty value to receive all agents/images.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of environments",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns possible agents for environment.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions for updating an agent assignment, which translates into no WRITE permissions to edit the configuration of the environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/variable": {
            "post": {
                "tags": [
                    "Core"
                ],
                "description": "Create the environment variable.",
                "operationId": "createEnvironmentVariable",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The new variable.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Variable has been created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid variable or already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified environment does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/variable/{variableName}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Get the environment variable by its name.",
                "operationId": "getEnvironmentVariable",
                "parameters": [
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "variable name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environment variable with the given name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariable"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "Returned when user has no permission to administrate specified environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Returned when specified environment/variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Core"
                ],
                "description": "Update the environment variable.",
                "operationId": "updateEnvironmentVariable",
                "parameters": [
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "variable name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The updated variable.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Variable has been updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid variable or does not exists - use POST method to add a new variable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified environment does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Core"
                ],
                "description": "Delete the environment variable.",
                "operationId": "deleteEnvironmentVariable",
                "parameters": [
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "variable name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Variable has been deleted successfully"
                    },
                    "401": {
                        "description": "Authentication required",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no permission to administrate specified environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Specified environment or variable does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/result/{deploymentResultId}": {
            "get": {
                "description": "Get result of version deployment to environment.",
                "operationId": "getDeploymentResult",
                "parameters": [
                    {
                        "name": "includeLogs",
                        "in": "query",
                        "description": "If logs should be included",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentResultId",
                        "in": "path",
                        "description": "Deployment result id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentResult"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment result not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/plan/favicon/{planKey}": {
            "get": {
                "description": "Plan's favicon which depends on last build result.",
                "operationId": "getFaviconForPlan",
                "parameters": [
                    {
                        "name": "planKey",
                        "in": "path",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plan's favicon",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestFavicon"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have READ permission for plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/repositories": {
            "get": {
                "description": "Retrieves paginated project repositories specified by the project key.",
                "operationId": "getPaginatedProjectRepositories",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "filter to retrieve matching results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "maximum": 500,
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "when repositories were successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestProjectRepository"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no read permission to the project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified project does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/repository": {
            "get": {
                "description": "Fetch list of repositories which granted to create plan in given project by Repository stored Bamboo Specs.",
                "operationId": "listAssignedRepositories_1",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of repositories granted to create plan in given project by Repository stored Bamboo Specs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestRepository"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Grant permission to create/edit plan in given project by Bamboo Specs from given repository.",
                "operationId": "addAssignedRepository_1",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "repository id",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RestIdContainer"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestIdContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Added repository entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryMinimal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When idContainer is empty or null",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When project does not exist or repository not found by id",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/repository/search": {
            "get": {
                "description": "Search for linked repositories which can be granted to create plans by Repository stored Bamboo Specs in given project",
                "operationId": "searchAvailableRepositories_1",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "part of repository name. Used to filter output.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page object with list of repositories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryList"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/repository/{repositoryId}": {
            "delete": {
                "description": "Remove approval to create plans in given project by given repository.",
                "operationId": "deleteRepositoryMapping_1",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "linked repository root id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed link between project and repository."
                    },
                    "403": {
                        "description": "When user has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or repository does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}": {
            "get": {
                "description": "Get information for project specified as project key.\n\n- plans - list of plans for project\n\n- plans.plan - list of plans with plan details (only plans visible - READ permission for user)\n\n- plans.plan.actions - list of plans with plan details and actions available for user for plan\n\n",
                "operationId": "getProject",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible expand parameters: plans, plans.plan, plans.plan.actions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showEmpty",
                        "in": "query",
                        "description": "flag to return project without plans, *true* by default",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestProject"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no VIEW permissions to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Returned when specified project does not exist or project has no plans if _showEmpty_ param is false",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Marks project for deletion. Project will be deleted by a batch job.",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When project is successfully marked for deletion"
                    },
                    "400": {
                        "description": "When project can't be removed, e.g. when it contains any plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or repository does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project": {
            "get": {
                "description": "List all projects defined in Bamboo. Projects without any plan are not listed by default, unless _showEmpty_ query param is set to true.\n\n- projects - list of projects projects.project - list of projects with project details\n\n- projects.project.plans - list of project details and plans for project\n\n- projects.project.plans.plan - list of project details and plans for project with plan details",
                "operationId": "getProjects",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Possible expand parameters: projects, projects.project.plans, projects.project.plans.plan",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showEmpty",
                        "in": "query",
                        "description": "flag to display projects without plans",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Bamboo projects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestProjects"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create project.",
                "operationId": "createProject",
                "requestBody": {
                    "description": "Project",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RestProject"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestProject"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestProject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no global CREATE permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/variables": {
            "get": {
                "description": "Retrieve the list of all variables for a project.",
                "operationId": "getProjectVariables",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of variables for the given project",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BuildVariable"
                                    }
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BuildVariable"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When project can't be removed, e.g. when it contains any plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to create new plan or modify any plan at specified project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/variable/{variableName}": {
            "get": {
                "description": "Retrieve the project variable by given name.",
                "operationId": "getProjectVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "variable name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A project variable with the given name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When project can't be removed, e.g. when it contains any plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to create new plan or modify any plan at specified project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the project variable.",
                "operationId": "deleteProjectVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "name of the variable to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project variable successfully deleted"
                    },
                    "400": {
                        "description": "Name field is empty",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no permission to administrate specified project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project/variable does not exist or user has no VIEW permission for it.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/variable": {
            "post": {
                "description": "Create or update project variable.",
                "operationId": "createOrUpdateVariable",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Project variable",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildVariable"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated variable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created variable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildVariableDefinitionContext"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no Administration permission to the project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/sharedCredentials": {
            "get": {
                "description": "Retrieves paginated shared credentials for the project specified by the project key.",
                "operationId": "getPaginatedProjectSharedCredentials",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "filter to retrieve matching results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size. Default size is 25. Max value is 500",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestSharedCredential"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no read permission to the project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/sharedCredentials/{sharedCredentialId}": {
            "delete": {
                "description": "Deletes shared project credentials specified by id.",
                "operationId": "deleteProjectSharedCredentials",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "project key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sharedCredentialId",
                        "in": "path",
                        "description": "project shared credentials id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project credentials removed"
                    },
                    "403": {
                        "description": "When user has no admin permission to the project or permission belongs to another project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project or credentials do not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/project/{projectKey}/specs": {
            "get": {
                "description": "Export all of the plans for a project to Bamboo specs.",
                "operationId": "exportProjectSpecs",
                "parameters": [
                    {
                        "name": "projectKey",
                        "in": "path",
                        "description": "The project to export for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "package",
                        "in": "query",
                        "description": "A package name for the exported spec",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "a format of code. It's 'java' by default.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "JAVA",
                                "YAML"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "representation of all project plans as Bamboo specs",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Export error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has insufficient permissions for the request",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When specified project does not exist or user has no VIEW permission for it",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants plan permissions to a given group.",
                "operationId": "addPermissionsForGroup_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes plan permissions from a given group.",
                "operationId": "removePermissionsForGroup_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any plan permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_3",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.",
                "operationId": "listRolePermissions_3",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants plan permissions to a given role.",
                "operationId": "addPermissionsForRole_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role. Anonymous role supports only VIEW permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes plan permissions from a given role.",
                "operationId": "removePermissionsForRole_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants plan permissions to a given user.",
                "operationId": "addPermissionsForUser_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes plan permissions from a given user.",
                "operationId": "removePermissionsForUser_3",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any plan permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_3",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_3",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/plan/{key}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_3",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Plan entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/status": {
            "get": {
                "description": "Returns the current status of the server. This endpoint enables a basic status check on the status of a Bamboo instance.\n<p>\nThe status endpoint will be responsive as long as the Bamboo REST plugin will be running. In other words, this endpoint does depend on the instance health and might not answer as a result of a failure or when Bamboo is still starting.",
                "operationId": "getStatus_2",
                "responses": {
                    "200": {
                        "description": "Returns the current status of the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAnonymousServerStatusInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/build/monitoring": {
            "get": {
                "description": "Retrieve build monitoring settings",
                "operationId": "getBuildMonitoring",
                "responses": {
                    "200": {
                        "description": "Bamboo build monitoring settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildMonitoring"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view build monitoring settings",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update build monitoring settings. Partially update supported.",
                "operationId": "updateRestBuildMonitoring",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestBuildMonitoring"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Status of the update operation and a link to the REST endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuildMonitoringLink"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If an invalid setting is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to update build monitoring",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants global permissions to a given group.",
                "operationId": "addPermissionsForGroup_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes global permissions from a given group.",
                "operationId": "removePermissionsForGroup_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their global permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users",
                "operationId": "listRolePermissions_2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants global permissions to a given role.",
                "operationId": "addPermissionsForRole_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role. Anonymous role supports only VIEW permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes global permissions from a given role.",
                "operationId": "removePermissionsForRole_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants global permissions to a given user.",
                "operationId": "addPermissionsForUser_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes global permissions from a given user.",
                "operationId": "removePermissionsForUser_2",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their global permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/global/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their global permissions. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_2",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks global admin or restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent": {
            "get": {
                "description": "Provides a list of agents.",
                "operationId": "getAgents_1",
                "parameters": [
                    {
                        "name": "online",
                        "in": "query",
                        "description": "Show only online agents",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete (non-paginated) list of agents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestBuildAgent"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}/capability": {
            "get": {
                "description": "List agent's capabilities.",
                "operationId": "getAgentCapabilities",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "includeShared",
                        "in": "query",
                        "description": "if response should include shared agent capabilities",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "array of agent's capabilities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestCapability"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have required permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create new agent capability.",
                "operationId": "createAgentCapability",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Agent capability",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestCapability"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "capability created successfully"
                    },
                    "400": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove all capabilities of build agent.",
                "operationId": "deleteAllAgentCapabilities",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Agent's capabilities removed"
                    },
                    "400": {
                        "description": "Couldn't remove agent's capabilities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/remote": {
            "get": {
                "description": "Provides a list of all agent authentication statuses.",
                "operationId": "getRemoteAgents",
                "parameters": [
                    {
                        "name": "online",
                        "in": "query",
                        "description": "filter only remote or only approved agents",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete (non-paginated) array of remote agents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestBuildAgent"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}": {
            "get": {
                "description": "Provides details of an agent.",
                "operationId": "getAgentInformation",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of capabilities/jobs/environments",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Expand parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "includeShared",
                        "in": "query",
                        "description": "if response should include shared agent capabilities",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of capabilities/jobs/environments",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of an agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgentInformation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove build agent.",
                "operationId": "deleteAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Agent removed"
                    },
                    "400": {
                        "description": "Couldn't remove agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}/status": {
            "get": {
                "description": "Provides information about status of agent, if it's online or offline.",
                "operationId": "getAgentStatus",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "filter only remote or only approved agents",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Complete (non-paginated) array of remote agents",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}/enable": {
            "put": {
                "description": "Enable an agent.",
                "operationId": "enableAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent has been enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgent"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}/disable": {
            "put": {
                "description": "Disable an agent.",
                "operationId": "disableAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent has been disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgent"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/{agentId}/capability/{capabilityKey}": {
            "put": {
                "description": "Update existing agent capability. It's allowed to skip capability key at request payload.",
                "operationId": "updateAgentCapability",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "capabilityKey",
                        "in": "path",
                        "description": "Capability key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Agent capability",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestRemoteAgentCapability"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "capability updated successfully"
                    },
                    "400": {
                        "description": "Validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove build agent capability.",
                "operationId": "deleteAgentCapability",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "agent id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "capabilityKey",
                        "in": "path",
                        "description": "Capability key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "capability removed successfully"
                    },
                    "400": {
                        "description": "Couldn't remove agent's capability",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/imServer": {
            "get": {
                "description": "Get instant message server configuration.",
                "operationId": "getIMServerConfig",
                "responses": {
                    "200": {
                        "description": "Current IM server configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestIMServerConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view IM configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If no IM server is configured",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update or create existing IM server configuration in bamboo. If IM server is already configured in bamboo, update existing configuration. Otherwise, create IM server configuration.",
                "operationId": "updateIMServerConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestIMServerConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated IM server configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestIMServerConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If invalid configuration is provided, e.g. missing host, invalid port, etc.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to update IM configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete current IM Server configuration.",
                "operationId": "deleteIMServerConfiguration",
                "responses": {
                    "204": {
                        "description": "Current IM server configuration is deleted"
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to delete IM configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If no IM server is configured",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/user": {
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Renames specified user.",
                "operationId": "renameUserPost",
                "parameters": [
                    {
                        "name": "externalRename",
                        "in": "query",
                        "description": "Set to true if the rename has been done externally and Bamboo is notified of it",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User rename request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUserRenameRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User has been successfully renamed."
                    },
                    "400": {
                        "description": "Request body is invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/user/{newUserName}": {
            "put": {
                "tags": [
                    "User management"
                ],
                "description": "Renames specified user.",
                "operationId": "renameUserPut",
                "parameters": [
                    {
                        "name": "newUserName",
                        "in": "path",
                        "description": "User's new username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalRename",
                        "in": "query",
                        "description": "Set to true if the rename has been done externally and Bamboo is notified of it",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User rename request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUserRenameRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "User has been successfully renamed."
                    },
                    "400": {
                        "description": "Request body is invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/version/{deploymentVersionId}/status": {
            "get": {
                "description": "Get current status of deployment version.",
                "operationId": "getLatestVersionStatus",
                "parameters": [
                    {
                        "name": "deploymentVersionId",
                        "in": "path",
                        "description": "Deployment version id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest version status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentVersionStatus"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Version status not defined"
                    },
                    "404": {
                        "description": "Deployment version not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/version/{deploymentVersionId}/status/{newStatus}": {
            "post": {
                "description": "Update deployment version status.",
                "operationId": "updateVersionStatus",
                "parameters": [
                    {
                        "name": "deploymentVersionId",
                        "in": "path",
                        "description": "Deployment version id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "newStatus",
                        "in": "path",
                        "description": "deployment version status. Possible values: UNKNOWN, APPROVED, BROKEN, INCOMPLETE",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest version status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentVersionStatus"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unknown status of version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "For not authorized user",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment version not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/version/{deploymentVersionId}/build-result": {
            "get": {
                "description": "Get associated build result of deployment version.",
                "operationId": "getVersionAndPlanResult",
                "parameters": [
                    {
                        "name": "deploymentVersionId",
                        "in": "path",
                        "description": "Deployment version id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment version and build result associated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentVersionAndPlanResult"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment version not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/planDirectoryInfo/{planKey}": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Provides the directories where artifacts and build logs can be found for a given plan key. Disabled by default.  See https://confluence.atlassian.com/display/BAMBOO/Plan+directory+information+REST+API for more information.",
                "operationId": "getPlanDirectory",
                "parameters": [
                    {
                        "name": "planKey",
                        "in": "path",
                        "description": "the plan key to retrieve directory information for.  Can be a top-level key (i.e. 'PROJ-PLAN') or a branch key (i.e. 'PROJ-PLAN15')",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Directories which may contain artifacts and log fiels for a given plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectoryInformationResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no read permissions or feature is disabled",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If plan doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/reindex": {
            "get": {
                "description": "Kicks off a reindex.  Requires system admin permissions to perform this reindex.",
                "operationId": "getReindexInfo",
                "responses": {
                    "200": {
                        "description": "Reindex is finished",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReindexBean"
                                }
                            }
                        }
                    },
                    "303": {
                        "description": "Reindex is currently performed in background or pending",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReindexBean"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Kicks off a reindex.  Requires system admin permissions to perform this operation.",
                "operationId": "reindex",
                "responses": {
                    "202": {
                        "description": "Response that provides a redirect to the GET",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReindexBean"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have system admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "500": {
                        "description": "Exception",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/expiry/custom/plan": {
            "get": {
                "description": "Get list of all plans where user has admin permission and which override global expiry settings. If global expiry is not enabled it returns empty response.",
                "operationId": "findPlansWithCustomExpirySettings",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of plans with custom expiry settings sorted by project name and plan name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PlanWithCustomExpirySettings"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/expiry/custom/plan/{planKey}": {
            "delete": {
                "description": "Delete custom plan expiry settings.",
                "operationId": "removePlanCustomExpirySettings",
                "parameters": [
                    {
                        "name": "planKey",
                        "in": "path",
                        "description": "key of plan with custom expiry settings",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When plan expiry settings were disabled"
                    },
                    "400": {
                        "description": "When can't parse plan key",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user don't have admin permissions for plan",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When can't find plan by key",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment environment permissions to a given group.",
                "operationId": "addPermissionsForGroup_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Permission names to grant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment environment permissions from a given group.",
                "operationId": "removePermissionsForGroup_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_1",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their deployment environment permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users",
                "operationId": "listRolePermissions_1",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment environment permissions to a given role.",
                "operationId": "addPermissionsForRole_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role. Anonymous role supports only VIEW permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment environment permissions from a given role.",
                "operationId": "removePermissionsForRole_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants deployment environment permissions to a given user.",
                "operationId": "addPermissionsForUser_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes deployment environment permissions from a given user.",
                "operationId": "removePermissionsForUser_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_1",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their deployment environment permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_1",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/environment/{id}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_1",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deployment environment entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/elastic/config": {
            "get": {
                "description": "Retrieves the current elastic configuration.",
                "operationId": "getRestElasticConfiguration",
                "responses": {
                    "200": {
                        "description": "Current elastic configuration of bamboo server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update elastic configuration.",
                "operationId": "updateRestElasticConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestElasticConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated elastic configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If an invalid elastic configuration is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permissions to update the elastic configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups/{name}": {
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Deletes the specified group, removing it from the system. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the group to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When group was deleted successfully"
                    },
                    "400": {
                        "description": "When group couldn't be deleted. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified group does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups/{name}/add-users": {
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Add multiple users to a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "addUsersToGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Usernames of users to add",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "All the users were added to the group"
                    },
                    "400": {
                        "description": "When the users couldn't be added to the group. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified group or users do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieve a paginated list of groups. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "getGroups",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified only group names containing the supplied string (case insensitive) will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Create a new group. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "createGroup_1",
                "requestBody": {
                    "description": "Group to create",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestGroup"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "When group has been created"
                    },
                    "400": {
                        "description": "When group couldn't be created. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups/{name}/remove-users": {
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Remove multiple users from a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "removeUsersFromGroup",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Usernames of users to remove",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "All the users were removed from the group"
                    },
                    "400": {
                        "description": "When the users couldn't be removed from the group. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified group or users do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups/{name}/more-members": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieves a list of users that are members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "findUsersInGroup",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified only users with usernames, display names or email addresses containing the supplied string (case insensitive) will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The group which should be used to locate members",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserDetails"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified group or users do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/groups/{name}/more-non-members": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieves a list of users that are not members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "findUsersNotInGroup",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified only users with usernames, display names or email addresses containing the supplied string will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The group which should be used to locate non-members",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserDetails"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/currentUser": {
            "get": {
                "description": "Fetch current user details",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "User details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User should be authorized",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/build/concurrency": {
            "get": {
                "description": "Retrieve build concurrency settings.",
                "operationId": "getBuildConcurrency",
                "responses": {
                    "200": {
                        "description": "Bamboo build concurrency settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildConcurrency"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view build concurrency settings",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update build concurrency settings. Partially update supported.",
                "operationId": "updateRestBuildConcurrency",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestBuildConcurrency"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Status of the update operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestBuildConcurrency"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If an invalid setting is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to update build concurrency settings.",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/elasticConfiguration": {
            "get": {
                "description": "Fetch all elastic image configurations.",
                "operationId": "getAll_1",
                "responses": {
                    "200": {
                        "description": "Array of elastic image configurations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestElasticImageConfig"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create elastic image configuration.",
                "operationId": "createImageConfiguration",
                "requestBody": {
                    "description": "Elastic image configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestElasticImageConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Elastic image created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticImageConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled or validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/elasticConfiguration/{configurationId}": {
            "get": {
                "description": "Elastic image configuration details.",
                "operationId": "getConfiguration_1",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Elastic image configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticImageConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Elastic configuration not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update elastic image configuration.",
                "operationId": "updateConfiguration",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "Image configuration id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Elastic image configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestElasticImageConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Elastic image updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticImageConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled or validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When image configuration doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete elastic image configuration.",
                "operationId": "deleteConfiguration",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "Image configuration id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Elastic image removed"
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled or image is provided by Bamboo or removal was unsuccessful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When image configuration doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/elasticConfiguration/image-id/{imageId}": {
            "put": {
                "description": "Bulk update of all images AMI id.",
                "operationId": "updateAllImageIds",
                "parameters": [
                    {
                        "name": "imageId",
                        "in": "path",
                        "description": "AMI id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "newImageId",
                        "in": "query",
                        "description": "New AMI id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of update images",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "When Elastic Bamboo is disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user does not have admin permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/groups/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants repository permissions to a given group.",
                "operationId": "addPermissionsForGroup_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If group already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes repository permissions from a given group.",
                "operationId": "removePermissionsForGroup_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If group already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If group doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/available-groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of groups which weren't granted explicitly any repository permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableGroups_6",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/roles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of roles with their repository permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported.",
                "operationId": "listRolePermissions_6",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of roles with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestRolePermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/roles/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants repository permissions to a given role.",
                "operationId": "addPermissionsForRole_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If role already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist or one of the requested permission isn't supported for given role",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes repository permissions from a given role.",
                "operationId": "removePermissionsForRole_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Affected role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If role already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If role doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/users/{name}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "description": "Grants repository permissions to a given user.",
                "operationId": "addPermissionsForUser_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to grant",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If permissions were granted",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "304": {
                        "description": "If user already had requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If 'username' user doesn't exist or one of the requested permission isn't supported for given endpoint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "description": "Revokes repository permissions from a given user.",
                "operationId": "removePermissionsForUser_6",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Username of the affected user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Permission names to be revoked",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "If permissions were revoked"
                    },
                    "304": {
                        "description": "If user already lacked requested permissions and permission state hasn't been changed",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If the 'username' user doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/available-users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Returns list of users which weren't granted explicitly any repository permissions. Resource is paged, returns single page of resources.",
                "operationId": "getAvailableUsers_6",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users which don't have any explicit permissions granted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUser"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/groups": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of groups with their repository permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.",
                "operationId": "listGroupPermissions_6",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Group name filter, filter is case insensitive matches group name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of groups with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroupPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/permissions/repository/{id}/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "description": "Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.",
                "operationId": "listUserPermissions_6",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User filter, filter is case insensitive matches: username, user's full name, user's email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository entity key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return single page of users with their permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks effective admin permissions for given entity",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/queue/deployment": {
            "get": {
                "tags": [
                    "deployment"
                ],
                "description": "Provide list of deployment results scheduled for execution and waiting in queue.",
                "operationId": "getBuildQueue",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "expands deployment result queue items on request. Possible value: queuedDeployments",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQueuedDeployments"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "deployment"
                ],
                "description": "Trigger deployment for deployment environment and version.",
                "operationId": "startDeployment",
                "parameters": [
                    {
                        "name": "versionId",
                        "in": "query",
                        "description": "Version (release) id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "Deployment environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "verboseLogging",
                        "in": "query",
                        "description": "Runs deployments with verbose logs",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger deployment for environment and version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQueuedDeployment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error occurred or deployment can't be triggered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have permissions to trigger deployment to given environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Environment or version are not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/queue/deployment/{deploymentResultId}": {
            "delete": {
                "tags": [
                    "deployment"
                ],
                "description": "Remove deployment result from queue.",
                "operationId": "removeDeploymentFromQueue",
                "parameters": [
                    {
                        "name": "deploymentResultId",
                        "in": "path",
                        "description": "id of deployment result in queue",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed deployment result from queue"
                    },
                    "400": {
                        "description": "Deployment already finished and can't be removed from queue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have permission to delete deployment from queue",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Can't find deployment result by deploymentResultId",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/auditLog": {
            "get": {
                "description": "Retrieve audit log settings.",
                "operationId": "getAuditLogConfiguration",
                "responses": {
                    "200": {
                        "description": "Audit log settings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuditLogConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view audit log settings",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Enable/disable audit log.",
                "operationId": "updateAuditLogConfiguration",
                "requestBody": {
                    "description": "Audit log settings",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestAuditLogConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Enable/disable audit log successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuditLogConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If an invalid setting is given",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to enable/disable audit log",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/requirement/summary": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Gets a summary of the agents that are capable of running an environment, based of its requirements.",
                "operationId": "getAgentMatchesForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A summary of the agents that can run an environment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgentSummary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user does not have permissions to get information about the environment.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the specified environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/requirement/detailedSummary": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Gets a detailed summary of the agents that are capable of running an environment, based of its requirements.",
                "operationId": "getDetailedAgentMatchesForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A summary of the agents that can run an environment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgentSummary"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user does not have permissions to get information about the environment.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the specified environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/requirement": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Gets all the requirements of an environment.",
                "operationId": "getRequirementsForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of a requirements",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestRequirement"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lack permissions for retrieving details about the environment structure, which translates into WRITE permissions to view and edit the environment configuration.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the specified environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Core"
                ],
                "description": "Adds a requirement for a given environment.",
                "operationId": "addRequirementForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "A representation of the requirement",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestRequirement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The created requirement",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRequirement"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions to add a requirement to an environment, which translates into no WRITE permissions to edit the configuration of the environment it belongs to.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "description": "Gets the details of a requirement for a given environment.",
                "operationId": "getRequirementForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requirementId",
                        "in": "path",
                        "description": "unique identifier of the requirement to get details of",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of a requirements",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRequirement"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lack permissions for retrieving details about the environment, which translates into WRITE permissions to view and edit the environment.",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the specified environment id is not found or the requirement id does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Core"
                ],
                "description": "Updates a requirement for a given environment.",
                "operationId": "updateRequirementForEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requirementId",
                        "in": "path",
                        "description": "unique identifier of the requirement to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "A representation of the requirement",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestRequirement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated requirement",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRequirement"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no permissions for updating a requirement, which translates into no WRITE permissions to edit the configuration of the environment it belongs to",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found, or the requirement id does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Core"
                ],
                "description": "Removes a requirement for an environment.",
                "operationId": "removeRequirementFromEnvironment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "environment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requirementId",
                        "in": "path",
                        "description": "unique identifier of the requirement to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The environment's requirement has been deleted successfully"
                    },
                    "403": {
                        "description": "If the user lacks permissions to remove an environment requirement, which translates into no WRITE permissions to edit the environment",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the environment id is not found, or the requirement it does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/agents/{agentId}": {
            "get": {
                "description": "Retrieve a build agent definition by id.",
                "operationId": "getAgentById",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Id of the agent",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent definition of agent with the id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgent"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view agent",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the agent does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update agent details",
                "operationId": "updateRestAgent",
                "parameters": [
                    {
                        "name": "agentId",
                        "in": "path",
                        "description": "Id of the agent",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "RestAgent that contains the update values",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestAgent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated agent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAgent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the new agent is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to update agent",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "If the agent does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/agents": {
            "get": {
                "description": "Return collection of all agents of all types.",
                "operationId": "getAgents",
                "responses": {
                    "200": {
                        "description": "All agents of all types and links to each",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestAgent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user lacks restricted admin permission to view agents",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/elasticInstances/instance/{instanceId}/logs": {
            "get": {
                "description": "Obtain logs from an EC2 instance. Note that this method will return the console output of the instance, not Bamboo agent logs.",
                "operationId": "getInstanceLog",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "description": "id of the EC2 instance",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance id and it's console output",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestElasticInstanceLog"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the input data or server state fails validation, for example when AWS account is not configured or Elastic Bamboo is not enabled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User doesn't have permissions to manage elastic instances",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "When no EC2 instance with the given id was found. The instance has to exist and must be managed by this Bamboo server",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/job/{jobKey}/docker": {
            "get": {
                "tags": [
                    "Build"
                ],
                "description": "Retrieves Docker configuration for given job.",
                "operationId": "getDockerPipelineConfiguration",
                "parameters": [
                    {
                        "name": "jobKey",
                        "in": "path",
                        "description": "Key of the job",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns Docker Pipeline configuration for given environment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDockerPipelineConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no admin permissions or job doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Build"
                ],
                "description": "Updates Docker configuration for given job.",
                "operationId": "setDockerPipelineConfiguration",
                "parameters": [
                    {
                        "name": "jobKey",
                        "in": "path",
                        "description": "Key of the job",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The request containing the details of the docker pipeline configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestDockerPipelineConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "If configuration is updated properly",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user has no admin permissions or job doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/scheduler/jobs/trigger": {
            "post": {
                "description": "Trigger background job execution.",
                "operationId": "triggerJob",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestScheduledJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Job is scheduled for execution",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestQuarantineConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Issues with access to underlying scheduler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Current user does not have sufficient privileges to trigger background job",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/scheduler/jobs": {
            "get": {
                "description": "Gets the collection of jobs currently scheduled to run.",
                "operationId": "getJobs",
                "responses": {
                    "200": {
                        "description": "Collection of jobs successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestScheduledJob"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Issues with access to underlying scheduler",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Current user does not have sufficient privileges to fetch list of scheduled tasks",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}": {
            "get": {
                "description": "Get deployment project by id.",
                "operationId": "getDeploymentProject_1",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment project details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentProject"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Update deployment project.",
                "operationId": "editDeploymentProject",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "deployment project to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUpdateDeploymentProjectRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deployment project details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentProject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no edit permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete deployment project.",
                "operationId": "deleteDeploymentProject",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deployment project removed"
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/repository": {
            "get": {
                "description": "List of repositories which granted to create/edit environment in given deployment project by Repository stored Bamboo Specs.",
                "operationId": "listAssignedRepositories",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of repositories granted to create/edit environment in given deployment project by Repository stored Bamboo Specs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestRepository"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Grant permission to create/edit plan in given deployment project by Bamboo Specs from given repository.",
                "operationId": "addAssignedRepository",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "repository id",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestIdContainer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "added repository",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryMinimal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When repository id is empty or null",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project or repository doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/repository/search": {
            "get": {
                "description": "Search for linked repositories which can be granted to create/modify environment by Repository stored Bamboo Specs in given deployment project.",
                "operationId": "searchAvailableRepositories",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of repositories",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "Part of repository name. Used to filter output.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of repositories",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page container with linked repositories which have RSS enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRepositoryList"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/repository/{repositoryId}": {
            "delete": {
                "description": "Remove approval to create plans in given deployment project by given repository.",
                "operationId": "deleteRepositoryMapping",
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": "Linked repository root id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "removed repository"
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project or repository doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/all": {
            "get": {
                "description": "Find all deployment projects with environments. Returns only deployment projects and environments visible for user.",
                "operationId": "getAllDeploymentProjects_1",
                "responses": {
                    "200": {
                        "description": "List of deployment projects with environments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestDeploymentProject"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project": {
            "put": {
                "description": "Create deployment project.",
                "operationId": "addDeploymentProject",
                "requestBody": {
                    "description": "deployment project to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestCreateDeploymentProjectRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created deployment project",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentProject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If validation fails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If user doesn't have create permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/versions": {
            "get": {
                "description": "Get list of deployment versions.",
                "operationId": "getDeploymentProjectVersions",
                "parameters": [
                    {
                        "name": "branchKey",
                        "in": "query",
                        "description": "plan branch key. Can be empty if default branch is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment project versions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentVersionList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/forPlan": {
            "get": {
                "description": "Get list of deployment projects for a build plan.",
                "operationId": "getDeploymentProjectsForPlan",
                "parameters": [
                    {
                        "name": "planKey",
                        "in": "query",
                        "description": "Plan key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of linked deployment projects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestLinkedDeploymentProject"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "When plan key is empty or plan don't found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/specs": {
            "get": {
                "description": "Export a deployment project to Bamboo Specs.",
                "operationId": "exportDeploymentSpec",
                "parameters": [
                    {
                        "name": "package",
                        "in": "query",
                        "description": "The package to use as the namespace of the exported Spec",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Optionally, a format of code. It's 'java' by default. Other option is 'yaml.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A JSON object with a code field containing the spec",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User has no Administration permission to project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/project/{deploymentProjectId}/version": {
            "post": {
                "description": "Create deployment version for given deployment project.",
                "operationId": "createVersion",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "deployment version to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestCreateVersionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Deployment project version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentVersion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "For anonymous access",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "403": {
                        "description": "User don't have permissions to create version in deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/authors": {
            "get": {
                "description": "A starts-with search of authors based on their author name.",
                "operationId": "searchAuthors",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "unlinkedOnly",
                        "in": "query",
                        "description": "if true will only include authors which are not currently linked to a user",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in authors",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for authors matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/plans": {
            "get": {
                "description": "Performs a \"starts with\" search against full plan name and full plan key.  Use \"type\" argument to filter by plan type by default will return TopLevelPlans",
                "operationId": "searchPlans",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in plans",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "permission",
                        "in": "query",
                        "description": "Only return those plans that querying user has permission to. Default is READ",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "READ",
                                "WRITE",
                                "BUILD",
                                "CLONE",
                                "VIEW_CONFIGURATION",
                                "ADMINISTRATION"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of the plan to return",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CHAIN",
                                "JOB",
                                "CHAIN_BRANCH"
                            ]
                        }
                    },
                    {
                        "name": "fuzzy",
                        "in": "query",
                        "description": "Whether the search should be more relaxed when matching results. Default is false",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/jobs/{planKey}": {
            "get": {
                "description": "Performs a \"starts with\" search against full job name and full job key.",
                "operationId": "searchJobs",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in jobs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "planKey",
                        "in": "path",
                        "description": "planKey for plan where jobs will be searched for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/stages/{planKey}": {
            "get": {
                "description": "Performs a \"starts with\" search against full stage name.",
                "operationId": "searchStages",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in stages",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "planKey",
                        "in": "path",
                        "description": "planKey for plan where stages will be searched for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stageId",
                        "in": "query",
                        "description": "Stage id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/branches": {
            "get": {
                "description": "Performs a \"starts with\" search against full plan branch name and full plan branch key. Branches are restricted to \"masterPlanKey\" plan.",
                "operationId": "searchBranches",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in branches",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeMasterBranch",
                        "in": "query",
                        "description": "Should master branch be included into result",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "branchNameOnly",
                        "in": "query",
                        "description": "Whether the search should only use branch names of plan branches. Default includes the VCS branch name into the fuzzy search",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "fuzzy",
                        "in": "query",
                        "description": "Whether the search should be more relaxed when matching results. Default is false",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "masterPlanKey",
                        "in": "query",
                        "description": "planKey for plan where branches will be searched for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "releasedInDeployment",
                        "in": "query",
                        "description": "id of deployment project - will return only branches that are released in this deployment",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/projects": {
            "get": {
                "description": "Performs a contains search against project name.",
                "operationId": "searchProjects",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in projects",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "permission",
                        "in": "query",
                        "description": "only return those projects that querying user has permission to. Default is READ",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "READ",
                                "WRITE",
                                "ADMINISTRATION"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/deployments": {
            "get": {
                "description": "Performs a contains search against deployment project name.",
                "operationId": "searchDeployments",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in projects",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "permission",
                        "in": "query",
                        "description": "Only return those deployment projects that querying user has permission to. Default is READ",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "READ",
                                "WRITE",
                                "ADMINISTRATION"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/versions": {
            "get": {
                "description": "Performs a contains search against a version name.",
                "operationId": "searchVersions",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "branchKey",
                        "in": "query",
                        "description": "Narrow the search to releases created out of the branch",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in projects",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "query",
                        "description": "The deployment project to search under",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "chronologicalOrder",
                        "in": "query",
                        "description": "Sort releases by creation date",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for plans matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/search/users": {
            "get": {
                "description": "A starts-with search of users based on their username, full-name and if allowed email address.",
                "operationId": "searchUsers",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of returned elements",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "includeAvatars",
                        "in": "query",
                        "description": "if true will include avatar urls in the response.  If gravatar is not enabled, no urls will be returned",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "The term to search for in users",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results for users matching the provided search term",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/assignment": {
            "get": {
                "tags": [
                    "resource"
                ],
                "description": "Get agent's assignment.",
                "operationId": "getAgentAssignments",
                "parameters": [
                    {
                        "name": "executorType",
                        "in": "query",
                        "description": "Executor type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AGENT",
                                "IMAGE"
                            ]
                        }
                    },
                    {
                        "name": "executorId",
                        "in": "query",
                        "description": "id of the agent or elastic image",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agent's assignments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestDedicatedAgent"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "resource"
                ],
                "description": "Dedicate agent or image.",
                "operationId": "addAgentAssignment",
                "parameters": [
                    {
                        "name": "executorType",
                        "in": "query",
                        "description": "Executor type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AGENT",
                                "IMAGE"
                            ]
                        }
                    },
                    {
                        "name": "executorId",
                        "in": "query",
                        "description": "id of the agent or elastic image",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "entityId",
                        "in": "query",
                        "description": "identifier of project, plan, job, deployment project or environment",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "assignmentType",
                        "in": "query",
                        "description": "should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agent's assignments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDedicatedAgent"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "resource"
                ],
                "description": "Remove agent's assignment.",
                "operationId": "removeAssignment",
                "parameters": [
                    {
                        "name": "executorType",
                        "in": "query",
                        "description": "Executor type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AGENT",
                                "IMAGE"
                            ]
                        }
                    },
                    {
                        "name": "executorId",
                        "in": "query",
                        "description": "id of the agent or elastic image",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "entityId",
                        "in": "query",
                        "description": "identifier of project, plan, job, deployment project or environment",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "assignmentType",
                        "in": "query",
                        "description": "should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successful removal of agent assignment"
                    },
                    "400": {
                        "description": "can't parse executorType or executableType",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "user has insufficient permissions for the request",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/assignment/search": {
            "get": {
                "tags": [
                    "resource"
                ],
                "description": "Search for assignments in specified entity's agents",
                "operationId": "searchEntityForAgent",
                "parameters": [
                    {
                        "name": "max-result",
                        "in": "query",
                        "description": "Maximum count of records",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "executorType",
                        "in": "query",
                        "description": "Executor type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AGENT",
                                "IMAGE"
                            ]
                        }
                    },
                    {
                        "name": "searchTerm",
                        "in": "query",
                        "description": "term to search for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "executorId",
                        "in": "query",
                        "description": "id of the agent or elastic image",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start-index",
                        "in": "query",
                        "description": "Start index of records",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "assignmentType",
                        "in": "query",
                        "description": "should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResultsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/projectVersioning/{deploymentProjectId}/namingPreview": {
            "get": {
                "description": "Get deployment version name preview.",
                "operationId": "getDeploymentNamingPreview",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nextVersionName",
                        "in": "query",
                        "description": "Version name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "incrementableVariables",
                        "in": "query",
                        "description": "variables used for version name. Divided by coma",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "incrementNumbers",
                        "in": "query",
                        "description": "If version number should be incremented",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version name preview",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestNamingPreview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/projectVersioning/{deploymentProjectId}/nextVersion": {
            "get": {
                "description": "Get next deployment version name.",
                "operationId": "getNextDeploymentVersions",
                "parameters": [
                    {
                        "name": "resultKey",
                        "in": "query",
                        "description": "Build result key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version name preview",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestNamingPreview"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/projectVersioning/{deploymentProjectId}/parseVariables": {
            "get": {
                "description": "Extract variables value from version name.",
                "operationId": "getVariablesFromName",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nextVersionName",
                        "in": "query",
                        "description": "Version name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Collection of variable values",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/projectVersioning/{deploymentProjectId}/variables": {
            "get": {
                "description": "Get variables associated with deployment project.",
                "operationId": "getDeploymentProjectVariables",
                "parameters": [
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Version variables",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionVariables"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project doesn't exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/issue-status/{issueKey}": {
            "get": {
                "description": "Get all deployment projects associated with Jira issue key",
                "operationId": "getJiraIssueStatusForProject",
                "parameters": [
                    {
                        "name": "issueKey",
                        "in": "path",
                        "description": "Jira issue key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deployment projectes associated with Jira issue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestJiraIssueRelatedDeploymentProjects"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/deploy/issue-status/{issueKey}/{deploymentProjectId}": {
            "get": {
                "description": "Get deployment project environments and versions associated with Jira issue",
                "operationId": "getJiraIssueStatusForProject_1",
                "parameters": [
                    {
                        "name": "issueKey",
                        "in": "path",
                        "description": "Jira issue key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentProjectId",
                        "in": "path",
                        "description": "Deployment project id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Environments and versions associated with Jira issue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestDeploymentProjectStatusForJiraIssue"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has no view permission to deployment project",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Deployment project not found",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/rename": {
            "put": {
                "tags": [
                    "User management"
                ],
                "description": "Renames specified user. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "renameUser",
                "requestBody": {
                    "description": "User rename request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUserRenameRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "When user has been renamed successfully"
                    },
                    "400": {
                        "description": "When the user couldn't be renamed. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieve a page of users. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified only users, whose username, full name or email contain the supplied string (case insensitive) will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserDetails"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Create a new user. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User to create",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestNewUser"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "When user has been created"
                    },
                    "400": {
                        "description": "User couldn't be created. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}": {
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Deletes the specified user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When user has been deleted successfully or user does not exist"
                    },
                    "400": {
                        "description": "User couldn't be deleted. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/credentials": {
            "put": {
                "tags": [
                    "User management"
                ],
                "description": "Change password of specified user. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "changeUserPassword",
                "requestBody": {
                    "description": "User password change request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUserPasswordUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Users password has been changed"
                    },
                    "400": {
                        "description": "When the password couldn't be changed. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/groups": {
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Add a user to multiple groups. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "assignGroups",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Group names",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The user has been added to all specified groups"
                    },
                    "400": {
                        "description": "When user couldn't be added to one or more groups. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user or groups do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Remove a user from multiple groups.  The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "unassignGroups",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User groups to unassign from",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The user has been removed from all specified groups"
                    },
                    "400": {
                        "description": "When user couldn't be removed from one or more groups. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user or groups do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/assigned-groups": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieves a list of groups to which the user belongs. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "findAssignedGroups",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified, only groups with names containing the supplied string will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/unassigned-groups": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieves a list of groups to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "findUnassignedGroups",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified, only groups with names containing the supplied string will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/unassigned-aliases": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieves a list of unlinked aliases to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "findUnassignedUserRepositoryAliases",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "If specified, only aliases with names containing the supplied string will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of aliases",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserAlias"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/alias": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieve a page of aliases. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "getUserRepositoryAliases",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of aliases",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestUserAlias"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User management"
                ],
                "description": "Link existing unlined alias or create the new one. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "createUserRepositoryAlias",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Aliases array",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "When alias has been created"
                    },
                    "400": {
                        "description": "Alias couldn't be created. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user or groups do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Unlink the specified alias from user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "unlinkUserRepositoryAlias",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Alias to unlink",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestUserAlias"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "When alias has been unlinked successfully or given user doesn't have this alias"
                    },
                    "400": {
                        "description": "User alias couldn't be deleted. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/access-token": {
            "get": {
                "tags": [
                    "User management"
                ],
                "description": "Retrieve a page of user's access tokens. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "getUserAccessTokens",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Page request size",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 25
                        }
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Page request start index",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of access tokens",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "self": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=25"
                                        },
                                        "prev": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=0"
                                        },
                                        "next": {
                                            "type": "string",
                                            "example": "http://localhost:8085/rest/api/latest/../paginate?limit=25&start=50"
                                        },
                                        "start": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "limit": {
                                            "type": "number",
                                            "example": 25
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RestAccessToken"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user do not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/admin/users/{name}/access-token/{tokenId}": {
            "delete": {
                "tags": [
                    "User management"
                ],
                "description": "Revoke user's access token. The authenticated user must have restricted administrative permission or higher to use this resource.",
                "operationId": "revokeUserToken",
                "parameters": [
                    {
                        "name": "tokenId",
                        "in": "path",
                        "description": "id of token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name identifying the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "When token has been successfully revoked"
                    },
                    "400": {
                        "description": "User doesn't own provided token. The response will hold additional information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The currently authenticated user does not have sufficient permissions",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "The specified user does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/authentication": {
            "get": {
                "description": "Provides a list of all agent authentication statuses.",
                "operationId": "getAgentAuthentications",
                "parameters": [
                    {
                        "name": "pending",
                        "in": "query",
                        "description": "Filter only pending or only approved agents",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful call will return a complete (non-paginated) list of agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RestRemoteAgentAuthentication"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has insufficient permissions for the request",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/api/latest/agent/authentication/{agentUuid}": {
            "put": {
                "description": "Authenticates a pending agent with the given UUID. If the agent has already been authenticated, the call will not\n     * change it's state.",
                "operationId": "authenticateAgent",
                "parameters": [
                    {
                        "name": "agentUuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successful authentication of an agent"
                    },
                    "400": {
                        "description": "Validation errors occurred (the provided UUID was invalid, no agent with the given UUID was found etc.)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "When user has no global ADMINISTRATION permission",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/remoteAgentSupport": {
            "get": {
                "description": "Retrieve the remote agent configuration",
                "operationId": "getRemoteAgentConfiguration",
                "responses": {
                    "200": {
                        "description": "Remote agent support configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRemoteAgentConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user lacks restricted administration permission to view this information",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update the remote agent configuration",
                "operationId": "updateRemoteAgentConfiguration",
                "requestBody": {
                    "description": "Remote agent configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestRemoteAgentConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The remote agent configuration after the update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestRemoteAgentConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "if there was an error in changing the remote agent support",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User lacks restricted admin permission to alter remote agent support",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        },
        "/admin/latest/config/mailServer": {
            "get": {
                "description": "Retrieve the current mail server configuration.",
                "operationId": "getMailConfiguration",
                "responses": {
                    "200": {
                        "description": "Mail Server configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestMailConfiguration"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The user lacks the system administrator permissions to get mailserver config",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Mail configuration server is not set",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update the mail server configuration.",
                "operationId": "updateMailConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RestMailConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated mail server configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestMailConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If invalid configuration is provided, e.g. missing host, invalid port, etc.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestErrorCollection"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User lacks administrator permissions to update mail configuration",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete current mail configuration.",
                "operationId": "deleteMailConfiguration",
                "responses": {
                    "204": {
                        "description": "Successfully deleted mail configuration"
                    },
                    "403": {
                        "description": "The user lacks the system administrator permissions to delete mail server config",
                        "content": {
                            "application/json": {
                            }
                        }
                    },
                    "404": {
                        "description": "Mail server configuration does not exist",
                        "content": {
                            "application/json": {
                            }
                        }
                    }
                }
            }
        }
    }
}
