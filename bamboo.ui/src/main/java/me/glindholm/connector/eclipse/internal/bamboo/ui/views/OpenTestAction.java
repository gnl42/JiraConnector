/*******************************************************************************
 * Copyright (c) 2000, 2009 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*******************************************************************************
 * Copyright (c) 2009 Atlassian and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Atlassian - initial API and implementation
 ******************************************************************************/

package me.glindholm.connector.eclipse.internal.bamboo.ui.views;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.ISourceRange;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.ITypeHierarchy;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.internal.corext.util.JavaConventionsUtil;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.osgi.util.NLS;
import org.eclipse.ui.texteditor.ITextEditor;

import me.glindholm.connector.eclipse.internal.bamboo.ui.model.TestCaseElement;
import me.glindholm.connector.eclipse.internal.bamboo.ui.model.TestElement;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Open a class on a Test method.
 */
public class OpenTestAction extends OpenEditorAction {

	private final String fMethodName;

	private IMethod fMethod;

	private int fLineNumber = -1;

	public OpenTestAction(TestResultsView testRunnerPart, TestCaseElement testCase) {
		this(testRunnerPart, testCase.getClassName(), extractRealMethodName(testCase.getTestMethodName()), true);
		String trace = testCase.getTrace();
		if (trace != null) {
			String rawClassName = TestElement.extractRawClassName(testCase.getTestName());
			rawClassName = rawClassName.replaceAll("\\.", "\\\\."); //$NON-NLS-1$//$NON-NLS-2$
			rawClassName = rawClassName.replaceAll("\\$", "\\\\\\$"); //$NON-NLS-1$//$NON-NLS-2$
			Pattern pattern = Pattern.compile(FailureTrace.FRAME_PREFIX + rawClassName + '.' + fMethodName
					+ "\\(.*:(\\d+)\\)" //$NON-NLS-1$
			);
			Matcher matcher = pattern.matcher(trace);
			if (matcher.find()) {
				try {
					fLineNumber = Integer.parseInt(matcher.group(1));
				} catch (NumberFormatException e) {
					// continue
				}
			}
		}
	}

	public OpenTestAction(TestResultsView testRunner, String className) {
		this(testRunner, className, null, true);
	}

	private OpenTestAction(TestResultsView testRunner, String className, String method, boolean activate) {
		super(testRunner, className, activate);
		fMethodName = method;
	}

	private static String extractRealMethodName(String testMethodName) {
		//workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=275308 :
		for (int i = 0; i < testMethodName.length(); i++) {
			if (!Character.isJavaIdentifierPart(testMethodName.charAt(i))) {
				return testMethodName.substring(0, i);
			}
		}
		return testMethodName;
	}

	public IJavaElement findElement(String className) throws JavaModelException {
		IType type = findType(className);
		if (type == null) {
			return null;
		}

		if (fMethodName == null) {
			return type;
		}

		IMethod method = findMethod(type);
		if (method == null) {
			ITypeHierarchy typeHierarchy = type.newSupertypeHierarchy(null);
			IType[] types = typeHierarchy.getAllSuperclasses(type);
			for (IType type2 : types) {
				method = findMethod(type2);
				if (method != null) {
					break;
				}
			}
		}
		if (method == null) {
			String title = "Go To Test";
			String message = NLS.bind("Method '{0}' not found. Opening the test class.",
					BasicElementLabels.getJavaElementName(fMethodName));
			MessageDialog.openInformation(getShell(), title, message);
			return type;
		}

		fMethod = method;
		return method;
	}

	private IMethod findMethod(IType type) {
		IStatus status = JavaConventionsUtil.validateMethodName(fMethodName, type);
		if (!status.isOK()) {
			return null;
		}
		IMethod method = type.getMethod(fMethodName, new String[0]);
		if (method != null && method.exists()) {
			return method;
		}
		return null;
	}

	public void reveal(ITextEditor textEditor) {
		if (fLineNumber >= 0) {
			try {
				IDocument document = textEditor.getDocumentProvider().getDocument(textEditor.getEditorInput());
				int lineOffset = document.getLineOffset(fLineNumber - 1);
				int lineLength = document.getLineLength(fLineNumber - 1);
				if (fMethod != null) {
					try {
						ISourceRange sr = fMethod.getSourceRange();
						if (sr == null || sr.getOffset() == -1 || lineOffset < sr.getOffset()
								|| sr.getOffset() + sr.getLength() < lineOffset + lineLength) {
							throw new BadLocationException();
						}
					} catch (JavaModelException e) {
						// not a problem
					}
				}
				textEditor.selectAndReveal(lineOffset, lineLength);
				return;
			} catch (BadLocationException x) {
				// marker refers to invalid text position -> do nothing
			}
		}
		if (fMethod != null) {
			try {
				ISourceRange range = fMethod.getNameRange();
				if (range != null && range.getOffset() >= 0) {
					textEditor.selectAndReveal(range.getOffset(), range.getLength());
				}
			} catch (JavaModelException e) {
				// not a problem
			}
		}
	}

}
